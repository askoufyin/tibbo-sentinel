#include "snmp.th"
#include "sensors_db.th"
#include "device_funcs.th"
#include "device_map.th"
#include "sensor_info.th"


/* Handlers for our SNMP OIDs
 * 
 */


// .iso.org.dod.internet.private.enterprises.tibbo.sentinel
snmp_oid _snmp_tibbo_prefix = { 8, { 1, 3, 6, 1, 4, 1, 20738, 1 }};
// iso.org.dod.internet.mgmt.mib-2
snmp_oid _snmp_mib2_prefix = { 6, { 1, 3, 6, 1, 2, 1 }}; 
 

extern sensor *connected_sensors;


static long
_expect(snmp_pdu *pdu, byte type) 
{
	byte t = *pdu->p++;
	dword l;
	
	if(t != type) {
		pdu->errno = SNMP_ERR_WRONG_TYPE;
		return -1;
	}
	
	return _decode_length(pdu->p);
}


static bool
common_oid_prefix(snmp_oid *oid, snmp_oid *prefix)
{
	word i;
	
	if(prefix->size > oid->size)
		return false;
		
	for(i=0; i<prefix->size; ++i)
		if(oid->data[i] != prefix->data[i])
			return false;
			
	return true;
}


static bool
oid_error(snmp_pdu *pdu, snmp_oid *oid, SNMP_Error err)
{
	_encode_oid(pdu->w, oid);
	_encode_null(pdu->w);
	pdu->errno = err;
	return false;
}


static bool
snmp_handle_str_setting(snmp_pdu *pkt, string& sname)
{
	long l;
	string tmp;
	
	if(pkt->pdu_type == SNMP_SET) {
		if((l = _expect(pkt, SDT_OCTET_STRING)) < 0)
			return false;
		tmp = _decode_str(pkt->p, l);
		sys.debugprint("SNMP SET "+sname+"=\""+tmp+"\"\r\n");
		stg_set(sname, 0, tmp);
	}
	
	_encode_str(pkt->w, stg_get(sname, 0));
	return true;
}


/* Handler for .iso.org.dod.internet.mgmt.mib-2 branch
 */
static bool
snmp_get_mgmt(snmp_pdu *pkt, snmp_oid *oid)
{
	long l;
	
	if(oid->size < 7) {
		pkt->errno = SNMP_ERR_NO_SUCH_NAME;
		return false;
	}
	
	if(oid->data[6] == 1) { // .system?
		switch(oid->data[7]) {
			case 1: // system.sysDescr
				return snmp_handle_str_setting(pkt, "SYSD");
			case 2: // system.sysObjectID
				_encode_oid(pkt->w, &_snmp_tibbo_prefix);
				break;
			case 3: // system.sysUpTime
				_encode_int(pkt->w, sys.timercountms / 1000);
				break;
			case 4: // system.sysContact
				return snmp_handle_str_setting(pkt, "SYSC");
			case 5: // system.sysName
				return snmp_handle_str_setting(pkt, "SYSN");
			case 6: // system.sysLocation
				return snmp_handle_str_setting(pkt, "SYSL");
			case 7: // system.sysServices
				_encode_int(pkt->w, 0x20);
				break;
			default:
				_encode_null(pkt->w);
				break;
		}
	}
	
	return true;
}


bool 
oid_atpos(snmp_oid *oid, byte pos, word v)
{
	if(oid->size < (pos+1))
		return false;
	return oid->data[pos] == v;
}


static bool
put_port_record(snmp_pdu *pdu, snmp_oid *oid, word n)
{
	switch(oid->data[oid->size-2]) {
		case 1:
			_encode_int(pdu->w, n);
			break;
		case 2:
			_encode_int(pdu->w, get_bus_type(n));
			break;
		case 3:
			_encode_str(pdu->w, "No name");
			break;
		default:
			pdu->errno = SNMP_ERR_NO_SUCH_NAME;
			return false;
	}
	
	return true;
}


static bool
snmp_get_tibbo_ports(snmp_pdu *pdu, snmp_oid *oid)
{
	word port_count = get_total_port_count();
	word n;
	
	/* .ports.pNumber
	 */
	if(oid_atpos(oid, 9, 1)) {
		_encode_oid(pdu->w, oid);
		_encode_int(pdu->w, port_count);
		return true;
	}
	
	/* .ports.pTable.pEntry
	 */
	if(oid->size > 11 && (oid->data[9] == 2) && (oid->data[10] == 1)) {
		if(pdu->pdu_type == SNMP_GET_NEXT) {
			if(oid->size == 12) {
				oid->data[oid->size++] = 1;
			} else {
				if(++oid->data[oid->size-1] == (port_count+1))
					return oid_error(pdu, oid, SNMP_ERR_NO_SUCH_NAME);
			}
		}

		_encode_oid(pdu->w, oid);
		n = oid->data[oid->size-1] - 1;
		return put_port_record(pdu, oid, n);
	}

	return oid_error(pdu, oid, SNMP_ERR_NO_SUCH_NAME);
}



static bool
put_sensor_record(snmp_pdu *pkt, snmp_oid *oid, sensor *s, int idx)
{
	long l;
	byte t;

	switch(oid->data[oid->size-2]) {
		case 1:
			_encode_int(pkt->w, idx);
			break;
		case 2:
			_encode_int(pkt->w, s->id);
			break;
		case 3:
			_encode_int(pkt->w, s->ptype);
			break;
		case 4:
			_encode_int(pkt->w, s->bus);
			break;
		case 5:
			_encode_int(pkt->w, s->chnl);
			break;
		case 6:
			_encode_int(pkt->w, s->drvid);
			break;
		case 7:
			_encode_str(pkt->w, address_format(ioport_type(s->port), &s->mac[0]));
			break;
		case 8:
			if(s->res.type == TYPE_FLOAT)
				l = (long)(s->res.f * 100.0);
			else
				l = s->res.l;
				
			_encode_long(pkt->w, l);
			//_encode_str(pkt->w, s->res);
			break;
		case 9:
			_encode_int(pkt->w, s->status);
			break;
		case 10:
			if(pkt->pdu_type == SNMP_SET) {
				t = *pkt->p++;
				l = _decode_length(pkt->p);
				if(t == SDT_OCTET_STRING) {
					//sensor_info_set(s->bus, s->chnl, &s->ow_addr, _decode_str(pkt->p, l));
					sensor_info_set(s->id, _decode_str(pkt->p, l));
				} else {
					pkt->p += l;
					pkt->errno = SNMP_ERR_BAD_VALUE;
					return false;
				}
			}
			_encode_str(pkt->w, sensor_info_get(s->id)); //s->bus, s->chnl, &s->ow_addr));
			break;
		default:
			pkt->errno = SNMP_ERR_NO_SUCH_NAME;
			return false;
	}
	
	return true;
}


/* Handler for .private.enterprises.tibbo.sentinel.sensors subtree
 */
static bool
snmp_get_tibbo_sensors(snmp_pdu *pdu, snmp_oid *oid)
{
	sensor *s;
	word idx;

	/* .sensors.sNumber
	 */
	if(oid_atpos(oid, 9, 1)) {
		_encode_oid(pdu->w, oid);
		_encode_int(pdu->w, sensor_count);
		return true;
	}
	
	/* .sensors.sTable.sEntry
	 */
	if(oid->size > 11 && (oid->data[9] == 2) && (oid->data[10] == 1)) {
		if(pdu->pdu_type == SNMP_GET_NEXT) {
			if(oid->size == 12) {
				oid->data[oid->size++] = 1;
			} else {
				if(++oid->data[oid->size-1] == (sensor_count+1))
					return oid_error(pdu, oid, SNMP_ERR_NO_SUCH_NAME);
			}
		}

		s = sensor_by_index(oid->data[oid->size-1] - 1);
		if(NULL == s)
			return oid_error(pdu, oid, SNMP_ERR_NO_SUCH_NAME);
		
		_encode_oid(pdu->w, oid);
		return put_sensor_record(pdu, oid, s, oid->data[oid->size-1]);
	}

	return oid_error(pdu, oid, SNMP_ERR_NO_SUCH_NAME);
}


static bool
snmp_get_tibbo_config(snmp_pdu *pdu, snmp_oid *oid)
{
	_encode_oid(pdu->w, oid);
	_encode_null(pdu->w);
	return true;
}


static bool
snmp_get_tibbo(snmp_pdu *pdu, snmp_oid *oid)
{
	if(oid->size > 8) {
		switch(oid->data[8]) {
			case 1:	// .buses
				return snmp_get_tibbo_ports(pdu, oid);
			case 2: // .sensors
				return snmp_get_tibbo_sensors(pdu, oid);
			case 3: // .config
				return snmp_get_tibbo_config(pdu, oid);
		}
	}

	pdu->errno = SNMP_ERR_NO_SUCH_NAME;
	return false;
}


bool 
snmp_oid_handler(snmp_pdu *pdu, snmp_oid *oid)
{
	pbyte pl, dp;
	bool res; 
	
	res = false;
	 
	*pdu->w++ = SDT_SEQUENCE;
	pl = pdu->w;
	
	*pdu->w++ = 0; // fake sequence length. pray it not exceeds 127 bytes
	dp = pdu->w;
	
	if(common_oid_prefix(oid, &_snmp_tibbo_prefix)) {
		res = snmp_get_tibbo(pdu, oid);
	} else 
	if(common_oid_prefix(oid, &_snmp_mib2_prefix)) {
		_encode_oid(pdu->w, oid);
		res = snmp_get_mgmt(pdu, oid);
	} 
	
	if(!res)
		_encode_null(pdu->w);
	  
	*pl = pdu->w - dp;
	return true;
}
