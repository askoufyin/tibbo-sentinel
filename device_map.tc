/* (c) 2016 Tibbo Technology, inc.
 *
 * Device Map
 *
 * This file contains every bit of platform- and configuration dependent code
 */
#include "global.th"
#include "debug.th"
#include "hal.th"
#include "device_map.th"
#include "1wire.th"


static ioport *_io_i2c[4] = { NULL, NULL, NULL, NULL };			// Max of 4 00-x Tibbits, up to 16 direct I/O lines, 8 I2C ports
static ioport *_io_1w[4] = { NULL, NULL, NULL, NULL }; 			// Max of 4 PICs per system, 12 One-Wire ports
static ioport *_io_rs485[4] = { NULL, NULL, NULL, NULL }; 		// Max of 4 ports, because only 4 UARTs exposed on PCB
static ioport *_io_dc[5] = { NULL, NULL, NULL, NULL, NULL }; 	// Max of 5 ports, 15 DC lines
static ioport *_io_out[2] = { NULL, NULL };						// Max of 4 OUT relay channels
static ioport *_io_modem = NULL;
static byte _modem_probed = 0;


bus_info 
_all_buses[] = { 
#if (PLATFORM_ID == TPP3W) || (PLATFORM_ID == TPP3WG2)
	/* 3 I2C buses: 0, 1, 2 (3 physical ioports) */
	{ IO_I2C, 0 }, { IO_I2C, 1 }, { IO_I2C, 2 },
	/* 3 1-Wire buses: 0, 1, 2 (1 physical ioport [PIC tibbit]) */
	{ IO_OW, 0 }, { IO_OW, 1 }, { IO_OW, 2 },
	/* 1 RS-485 bus + 1 optional (2 physical ioports) */
	{ IO_RS485, 0 },
	/* Up to 15 Dry Contact ports (5 physical ioports) */
	{ IO_DC, 0 }, { IO_DC, 1 }, { IO_DC, 2 }, { IO_DC, 3 }, { IO_DC, 4 }, { IO_DC, 5 }
#elif (PLATFORM_ID == TPP2W) || (PLATFORM_ID == TPP2WG2)
	/* 1 I2C buses: (1 physical ioports) */
	{ IO_I2C, 0 }, 
	/* 3 1-Wire buses: 0, 1, 2 (1 physical ioport [PIC tibbit]) */
	/* { IO_OW, 0 }, { IO_OW, 1 }, { IO_OW, 2 }, */
	/* 1 RS-485 bus + 1 optional (2 physical ioports) */
	{ IO_RS485, 0 },
	/* Up to 15 Dry Contact ports (5 physical ioports) */
	{ IO_DC, 0 }, { IO_DC, 1 }, { IO_DC, 2 }, { IO_DC, 3 }, { IO_DC, 4 }, { IO_DC, 5 }
#endif
};


iotype
get_bus_type(byte n)
{
	if(n < sizeof(_all_buses))
		return _all_buses[n].type;
		
	return IO_NONE;
}


byte
get_total_port_count()
{
	return sizeof(_all_buses) / sizeof(_all_buses[0]);
}


byte
get_port_count(iotype type)
{
	byte i, res;
	
	for(i=0, res=0; i<COUNTOF(_all_buses); ++i)
		if(type == _all_buses[i].type)
			++res;
			
	return res;
}


bool
device_map_init()
{
#if (PLATFORM_ID == TPP3W) || (PLATFORM_ID == TPP3WG2)
/* Standard TPP3 config 
 */
	tibbit_install(0, TB_01); 		// Universal RS-232/422/485 serial port. 2 slots
	// Slot 1: Occupied because Tibbit #01 is a wide tibbit
	tibbit_install(2, TB_05); 		// RS-485 
	// Slot 3: Unused. But in reality, there is tibbit 00-3 installed in this slot, 
	//		   providing +5VDC and GND lines on a terminal block pins 8 and 9
	tibbit_install(4, TB_31); 		// PIC coprocessor with 1-wire firmware
	tibbit_install(5, TB_03_1);		// Two low-power relays
	tibbit_install(6, TB_47);		// GPRS modem UART lines
	// Slot 7: GPRS modem control lines
	tibbit_install(8, TB_04_2);		// 3 optio-isolated inputs, common -
	tibbit_install(9, TB_04_2);		// 3 optio-isolated inputs, common -
	tibbit_install(10, TB_00_1);	// 4 direct IO lines
	tibbit_install(11, TB_00_3);	// 2 direct IO lines, +5VDC, ground
	// slots 12 & 13 is unused
#elif (PLATFORM_ID == TPP2W) || (PLATFORM_ID == TPP2WG2)
/* Standard TPP2 config 
 */
	//tibbit_install(0, TB_31); 		// PIC coprocessor with 1-wire firmware
	tibbit_install(0, TB_47);		// GPRS modem UART lines
	//tibbit_install(1, TB_07);		// Two solid state relays
	tibbit_install(2, TB_05); 		// RS-485 
	tibbit_install(3, TB_00_3); 	// 2 direct IO lines, +5VDC, ground
	tibbit_install(4, TB_04_4);		// 4 optio-isolated inputs, common GND
	tibbit_install(5, TB_04_4);		// 4 optio-isolated inputs, common GND
#else
#error Hardware platform not supported yet.
#endif
	return true; 
}


/* TODO: 
 * 		- Need a channel # -> ioport index info
 */
 

ioport *
map_device(iotype bus, byte channel)
{
	ioport *out = NULL;
	char slot;
#if (PLATFORM_ID == TPP3W) || (PLATFORM_ID == TPP3WG2)
	switch(bus) {
		case IO_I2C: 
			if(channel == 0) {
				if(NULL == _io_i2c[0])
					_io_i2c[0] = ioport_alloc(10, IO_I2C, 0);
					//_io_i2c[0] = ioport_alloc(tibbit_get_slot(TB_00_1, 0), IO_I2C, 0);
				out = _io_i2c[0];
			} else if(channel == 1) {
				if(NULL == _io_i2c[1])
					_io_i2c[1] = ioport_alloc(10, IO_I2C, 2);
					//_io_i2c[1] = ioport_alloc(tibbit_get_slot(TB_00_1, 0), IO_I2C, 2);
				out = _io_i2c[1];
			} else if(channel == 2) {
				if(NULL == _io_i2c[2])
					_io_i2c[2] = ioport_alloc(11, IO_I2C, 0);
					//_io_i2c[2] = ioport_alloc(tibbit_get_slot(TB_00_3, 0), IO_I2C, 0);
				out = _io_i2c[2];
			}
			
//			if(NULL != out)
//				ioport_setopt(out, IO_SSI_HW_ACCEL, true);	// enable SSI port HW acceleration

			break;
			
		case IO_OW:
		case IO_SW:
			if(channel >= 0 && channel <= 3) {
				if(NULL == _io_1w[0]) {
					_io_1w[0] = ioport_alloc(4, IO_OW, -1);

//					ioport_setopt(out, IO_SSI_HW_ACCEL, true);	// enable SSI port HW acceleration
//					ioport_setopt(out, IO_SSI_HW_SPEED, 200); 	// 1 = fastest, 255 = slowest
					
					/* configure PIC status pin as input
					 */
					io.num = _io_1w[0]->d.ssi.stat;
					io.enabled = NO;
				}
				
				out =_io_1w[0];
				ow_setdevaddr(out, 0x03); // PIC I2C address is 0x03
			}
			break;

		case IO_RS485:
			if(NULL == _io_rs485[0])
				_io_rs485[0] = ioport_alloc(2, IO_RS485, -1);
			out = _io_rs485[0];
			break;
			
		case IO_DC:
			if(channel < 6) {
				byte ppn = channel / 3;
				if(NULL == _io_dc[ppn])
					_io_dc[ppn] = ioport_alloc(8 + ppn, IO_DC, channel % 3);
				out = _io_dc[ppn];
			}
			break;
			
		case IO_OUT:
			if(NULL == _io_out[0])
				_io_out[0] = ioport_alloc(5, IO_GPIO4, 0);
			out = _io_out[0];
			break;
			
		case IO_MODEM:
			if(NULL == _io_modem && !_modem_probed) {
				_modem_probed = true;
				slot = tibbit_get_slot(TB_47, 0);
				if(slot >= 0) {
					if((slot % 2) == 0 && (slot < 7)) {
						_io_modem = ioport_alloc(slot, IO_RS232, -1);
						if(NULL != _io_modem)
							serial_setup(_io_modem);
					} else {
						DBG("Modem installed in wrong slot\r\n");
					}
				} else {
					ERR("Modem is not installed\r\n");
				}
			}
			out = _io_modem;
			break;
	}
#elif (PLATFORM_ID == TPP2W) || (PLATFORM_ID == TPP2WG2)
	switch(bus) {
		case IO_I2C: 
			if(channel == 0) {
				if(NULL == _io_i2c[0])
					_io_i2c[0] = ioport_alloc(1, IO_I2C, 2);
				out = _io_i2c[0];
			}
			
//			if(NULL != out)
//				ioport_setopt(out, IO_SSI_HW_ACCEL, true);	// enable SSI port HW acceleration

			break;
			
		case IO_OW:
		case IO_SW:
			if(channel >= 0 && channel <= 3) {
				if(NULL == _io_1w[0]) {
					_io_1w[0] = ioport_alloc(0, IO_OW, -1);

//					ioport_setopt(out, IO_SSI_HW_ACCEL, true);	// enable SSI port HW acceleration
//					ioport_setopt(out, IO_SSI_HW_SPEED, 200); 	// 1 = fastest, 255 = slowest
					
					/* configure PIC status pin as input
					 */
					io.num = _io_1w[0]->d.ssi.stat;
					io.enabled = NO;
				}
				
				out =_io_1w[0];
				ow_setdevaddr(out, 0x03); // PIC I2C address is 0x03
			}
			break;

		case IO_RS485:
			if(NULL == _io_rs485[0])
				_io_rs485[0] = ioport_alloc(2, IO_RS485, -1);
			out = _io_rs485[0];
			break;
			
		case IO_DC:
			if(channel < 6) {
				byte ppn = channel / 3;
				if(NULL == _io_dc[ppn])
					_io_dc[ppn] = ioport_alloc(4 + ppn, IO_DC, channel % 3);
				out = _io_dc[ppn];
			}
			break;
			
		case IO_OUT:
			if(NULL == _io_out[0])
				_io_out[0] = ioport_alloc(1, IO_GPIO4, 0);
			out = _io_out[0];
			break;
			
		case IO_MODEM:
			if(NULL == _io_modem && !_modem_probed) {
				_modem_probed = true;
				slot = tibbit_get_slot(TB_47, 0);
				if(slot >= 0) {
					if((slot % 2) == 0 && (slot < 7)) {
						_io_modem = ioport_alloc(slot, IO_RS232, -1);
						if(NULL != _io_modem)
							serial_setup(_io_modem);
					} else {
						DBG("Modem installed in wrong slot");
					}
				} else {
					ERR("Modem is not installed");
				}
			}
			out = _io_modem;
			break;
	}
#endif
	return out;
}
