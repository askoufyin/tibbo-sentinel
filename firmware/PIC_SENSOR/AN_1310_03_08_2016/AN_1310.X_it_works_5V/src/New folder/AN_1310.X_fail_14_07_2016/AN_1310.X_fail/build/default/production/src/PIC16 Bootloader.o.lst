MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; Copyright (c) 2002-2011,  Microchip Technology Inc.
                      00002 ;
                      00003 ; Microchip licenses this software to you solely for use with Microchip
                      00004 ; products.  The software is owned by Microchip and its licensors, and
                      00005 ; is protected under applicable copyright laws.  All rights reserved.
                      00006 ;
                      00007 ; SOFTWARE IS PROVIDED "AS IS."  MICROCHIP EXPRESSLY DISCLAIMS ANY
                      00008 ; WARRANTY OF ANY KIND, WHETHER EXPRESS OR IMPLIED, INCLUDING BUT
                      00009 ; NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
                      00010 ; FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL
                      00011 ; MICROCHIP BE LIABLE FOR ANY INCIDENTAL, SPECIAL, INDIRECT OR
                      00012 ; CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, HARM TO YOUR
                      00013 ; EQUIPMENT, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY
                      00014 ; OR SERVICES, ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED
                      00015 ; TO ANY DEFENSE THEREOF), ANY CLAIMS FOR INDEMNITY OR CONTRIBUTION,
                      00016 ; OR OTHER SIMILAR COSTS.
                      00017 ;
                      00018 ; To the fullest extent allowed by law, Microchip and its licensors
                      00019 ; liability shall not exceed the amount of fees, if any, that you
                      00020 ; have paid directly to Microchip to use this software.
                      00021 ;
                      00022 ; MICROCHIP PROVIDES THIS SOFTWARE CONDITIONALLY UPON YOUR ACCEPTANCE
                      00023 ; OF THESE TERMS.
                      00024 ;
                      00025 ; Author        Date        Comment
                      00026 ; ************************************************************************
                      00027 ; E. Schlunder  08/16/2010  Added support for LWLO bit on 16F1xxx
                      00028 ;                           devices.
                      00029 ; E. Schlunder  07/17/2009  Bringing back support for bootloader at 
                      00030 ;                           address 0 for hardware boot block write
                      00031 ;                           protect.
                      00032 ; E. Schlunder  05/08/2009  Upgrade to support new Serial Bootloader 
                      00033 ;                           features and protocol.
                      00034 ;
                      00035 ; Bootloader for PIC16F by Rodger Richey
                      00036 ; Adapted from PIC18F bootloader developed by Ross Fosler
                      00037 ; 03/18/2002    ... First full implementation
                      00038 ; 03/25/2002    Modified receive & parse engine to vector to autobaud on a checksum 
                      00039 ;               error since a checksum error could likely be a communications problem.
                      00040 ;               Modified the protocol to incorporate the autobaud as part of the 
                      00041 ;               first received <STX>. Doing this improves robustness by allowing
                      00042 ;               re-sync under any condition. Previously it was possible to enter a 
                      00043 ;               state where only a hard reset would allow re-syncing.
                      00044 ; 04/09/2002    Fixed bugs: 1) clear carry before shifting ABTIME in Autobaud
                      00045 ;                           2) Increment address in program memory write
                      00046 ;                           3) Increment address in program memory read
                      00047 ; 06/07/2002    Fixed bug in read, byte counter in code is word counter.  Needed
                      00048 ;               to multiply by 2 to get bytes.
                      00049 ;
                      00050 ; *****************************************************************************
                      00051 
                      00052 #include "p16F1824.inc"
                      00001         LIST
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Mar 21 2016
                      00005 ;  MPASM PIC16F1824 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      01265         LIST
                      00053 
                      00054 
                      00055  
                      00056 ; CONFIG1
                      00057 ; __config 0x3FBC
8007   3FA4           00058  __CONFIG _CONFIG1, _FOSC_INTOSC & _WDTE_OFF & _PWRTE_OFF & _MCLRE_OFF & _CP_OFF & _CPD_OFF & _BOREN_ON 
                            & _CLKOUTEN_OFF & _IESO_ON & _FCMEN_ON
                      00059 ; CONFIG2
                      00060 ; __config 0x3FFF
8008   1FFF           00061  __CONFIG _CONFIG2, _WRT_OFF & _PLLEN_ON & _STVREN_ON & _BORV_LO & _LVP_OFF
                      00062  
                      00063        
                      00064 ; *****************************************************************************
                      00065 #include "devices.inc"
                      00001 #ifdef __12LF1840
                      00002      #include p12LF1840.inc
                      00003 
                      00004      #define DEVICEID                .222
                      00005      #define WRITE_FLASH_BLOCKSIZE   .32
                      00006      #define ERASE_FLASH_BLOCKSIZE   .32
                      00007      #define END_FLASH               0x1000
                      00008      #define END_GPR                 0x1000
                      00009 #endif
                      00010 
                      00011 ; PIC12F609 does not support self-programming.
                      00012 ; PIC12F615 does not support self-programming.
                      00013 #ifdef __12F617
                      00014      #include p12F617.inc
                      00015 
                      00016      #define DEVICEID                .155
                      00017      #define WRITE_FLASH_BLOCKSIZE   .4
                      00018      #define ERASE_FLASH_BLOCKSIZE   .16
                      00019      #define END_FLASH               0x800
                      00020      #define END_GPR                 0x100
                      00021 #endif
                      00022 
                      00023 #ifdef __12F629
                      00024      #include p12F629.inc
                      00025 
                      00026      #define DEVICEID                .124
                      00027      #define WRITE_FLASH_BLOCKSIZE   .1
                      00028      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00029      #define END_FLASH               0x400
                      00030      #define END_GPR                 0xE0
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00031 #endif
                      00032 
                      00033 #ifdef __12F635
                      00034      #include p12F635.inc
                      00035 
                      00036      #define DEVICEID                .125
                      00037      #define WRITE_FLASH_BLOCKSIZE   .4
                      00038      #define ERASE_FLASH_BLOCKSIZE   .16
                      00039      #define END_FLASH               0x400
                      00040      #define END_GPR                 0x200
                      00041 #endif
                      00042 
                      00043 #ifdef __12F675
                      00044      #include p12F675.inc
                      00045 
                      00046      #define DEVICEID                .126
                      00047      #define WRITE_FLASH_BLOCKSIZE   .1
                      00048      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00049      #define END_FLASH               0x400
                      00050      #define END_GPR                 0xE0
                      00051 #endif
                      00052 
                      00053 #ifdef __12F683
                      00054      #include p12F683.inc
                      00055 
                      00056      #define DEVICEID                .35
                      00057      #define WRITE_FLASH_BLOCKSIZE   .4
                      00058      #define ERASE_FLASH_BLOCKSIZE   .16
                      00059      #define END_FLASH               0x800
                      00060      #define END_GPR                 0x100
                      00061 #endif
                      00062 
                      00063 #ifdef __12F752
                      00064      #include p12F752.inc
                      00065 
                      00066      #define DEVICEID                .168
                      00067      #define WRITE_FLASH_BLOCKSIZE   .4
                      00068      #define ERASE_FLASH_BLOCKSIZE   .16
                      00069      #define END_FLASH               0x400
                      00070      #define END_GPR                 0x200
                      00071 #endif
                      00072 
                      00073 #ifdef __12F1822
                      00074      #include p12F1822.inc
                      00075 
                      00076      #define DEVICEID                .312
                      00077      #define WRITE_FLASH_BLOCKSIZE   .16
                      00078      #define ERASE_FLASH_BLOCKSIZE   .16
                      00079      #define END_FLASH               0x800
                      00080      #define END_GPR                 0x1000
                      00081 #endif
                      00082 
                      00083 #ifdef __12F1840
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00084      #include p12F1840.inc
                      00085 
                      00086      #define DEVICEID                .220
                      00087      #define WRITE_FLASH_BLOCKSIZE   .32
                      00088      #define ERASE_FLASH_BLOCKSIZE   .32
                      00089      #define END_FLASH               0x1000
                      00090      #define END_GPR                 0x1000
                      00091 #endif
                      00092 
                      00093 ; PIC12HV609 does not support self-programming.
                      00094 ; PIC12HV615 does not support self-programming.
                      00095 #ifdef __12HV752
                      00096      #include p12HV752.inc
                      00097 
                      00098      #define DEVICEID                .169
                      00099      #define WRITE_FLASH_BLOCKSIZE   .4
                      00100      #define ERASE_FLASH_BLOCKSIZE   .16
                      00101      #define END_FLASH               0x400
                      00102      #define END_GPR                 0x200
                      00103 #endif
                      00104 
                      00105 #ifdef __12LF1822
                      00106      #include p12LF1822.inc
                      00107 
                      00108      #define DEVICEID                .320
                      00109      #define WRITE_FLASH_BLOCKSIZE   .16
                      00110      #define ERASE_FLASH_BLOCKSIZE   .16
                      00111      #define END_FLASH               0x800
                      00112      #define END_GPR                 0x1000
                      00113 #endif
                      00114 
                      00115 #ifdef __16LF1947
                      00116      #include p16LF1947.inc
                      00117 
                      00118      #define DEVICEID                .301
                      00119      #define WRITE_FLASH_BLOCKSIZE   .8
                      00120      #define ERASE_FLASH_BLOCKSIZE   .32
                      00121      #define END_FLASH               0x4000
                      00122      #define END_GPR                 0x1000
                      00123 #endif
                      00124 
                      00125 #ifdef __16F72
                      00126      #include p16F72.inc
                      00127 
                      00128      #define DEVICEID                .5
                      00129      #define WRITE_FLASH_BLOCKSIZE   .2
                      00130      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00131      #define END_FLASH               0x800
                      00132      #define END_GPR                 0x200
                      00133 #endif
                      00134 
                      00135 #ifdef __16F73
                      00136      #include p16F73.inc
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00137 
                      00138      #define DEVICEID                .48
                      00139      #define WRITE_FLASH_BLOCKSIZE   .2
                      00140      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00141      #define END_FLASH               0x1000
                      00142      #define END_GPR                 0x200
                      00143 #endif
                      00144 
                      00145 #ifdef __16F74
                      00146      #include p16F74.inc
                      00147 
                      00148      #define DEVICEID                .49
                      00149      #define WRITE_FLASH_BLOCKSIZE   .2
                      00150      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00151      #define END_FLASH               0x1000
                      00152      #define END_GPR                 0x200
                      00153 #endif
                      00154 
                      00155 #ifdef __16F76
                      00156      #include p16F76.inc
                      00157 
                      00158      #define DEVICEID                .50
                      00159      #define WRITE_FLASH_BLOCKSIZE   .2
                      00160      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00161      #define END_FLASH               0x2000
                      00162      #define END_GPR                 0x200
                      00163 #endif
                      00164 
                      00165 #ifdef __16F77
                      00166      #include p16F77.inc
                      00167 
                      00168      #define DEVICEID                .51
                      00169      #define WRITE_FLASH_BLOCKSIZE   .2
                      00170      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00171      #define END_FLASH               0x2000
                      00172      #define END_GPR                 0x200
                      00173 #endif
                      00174 
                      00175 #ifdef __16F83
                      00176      #include p16F83.inc
                      00177 
                      00178      #define DEVICEID                .51
                      00179      #define WRITE_FLASH_BLOCKSIZE   .1
                      00180      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00181      #define END_FLASH               0x200
                      00182      #define END_GPR                 0xB0
                      00183 #endif
                      00184 
                      00185 #ifdef __16F84
                      00186      #include p16F84.inc
                      00187 
                      00188      #define DEVICEID                .51
                      00189      #define WRITE_FLASH_BLOCKSIZE   .1
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00190      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00191      #define END_FLASH               0x400
                      00192      #define END_GPR                 0xD0
                      00193 #endif
                      00194 
                      00195 #ifdef __16F84A
                      00196      #include p16F84A.inc
                      00197 
                      00198      #define DEVICEID                .43
                      00199      #define WRITE_FLASH_BLOCKSIZE   .1
                      00200      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00201      #define END_FLASH               0x400
                      00202      #define END_GPR                 0xD0
                      00203 #endif
                      00204 
                      00205 #ifdef __16F87
                      00206      #include p16F87.inc
                      00207 
                      00208      #define DEVICEID                .57
                      00209      #define WRITE_FLASH_BLOCKSIZE   .4
                      00210      #define ERASE_FLASH_BLOCKSIZE   .32
                      00211      #define END_FLASH               0x1000
                      00212      #define END_GPR                 0x200
                      00213 #endif
                      00214 
                      00215 #ifdef __16F88
                      00216      #include p16F88.inc
                      00217 
                      00218      #define DEVICEID                .59
                      00219      #define WRITE_FLASH_BLOCKSIZE   .4
                      00220      #define ERASE_FLASH_BLOCKSIZE   .32
                      00221      #define END_FLASH               0x1000
                      00222      #define END_GPR                 0x200
                      00223 #endif
                      00224 
                      00225 ; PIC16F610 does not support self-programming.
                      00226 ; PIC16F616 does not support self-programming.
                      00227 #ifdef __16F627
                      00228      #include p16F627.inc
                      00229 
                      00230      #define DEVICEID                .61
                      00231      #define WRITE_FLASH_BLOCKSIZE   .1
                      00232      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00233      #define END_FLASH               0x400
                      00234      #define END_GPR                 0x200
                      00235 #endif
                      00236 
                      00237 #ifdef __16F627A
                      00238      #include p16F627A.inc
                      00239 
                      00240      #define DEVICEID                .130
                      00241      #define WRITE_FLASH_BLOCKSIZE   .1
                      00242      #define ERASE_FLASH_BLOCKSIZE   .1024
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00243      #define END_FLASH               0x400
                      00244      #define END_GPR                 0x200
                      00245 #endif
                      00246 
                      00247 #ifdef __16F628
                      00248      #include p16F628.inc
                      00249 
                      00250      #define DEVICEID                .62
                      00251      #define WRITE_FLASH_BLOCKSIZE   .1
                      00252      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00253      #define END_FLASH               0x800
                      00254      #define END_GPR                 0x200
                      00255 #endif
                      00256 
                      00257 #ifdef __16F628A
                      00258      #include p16F628A.inc
                      00259 
                      00260      #define DEVICEID                .131
                      00261      #define WRITE_FLASH_BLOCKSIZE   .1
                      00262      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00263      #define END_FLASH               0x800
                      00264      #define END_GPR                 0x200
                      00265 #endif
                      00266 
                      00267 #ifdef __16F630
                      00268      #include p16F630.inc
                      00269 
                      00270      #define DEVICEID                .134
                      00271      #define WRITE_FLASH_BLOCKSIZE   .1
                      00272      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00273      #define END_FLASH               0x400
                      00274      #define END_GPR                 0xE0
                      00275 #endif
                      00276 
                      00277 #ifdef __16F631
                      00278      #include p16F631.inc
                      00279 
                      00280      #define DEVICEID                .161
                      00281      #define WRITE_FLASH_BLOCKSIZE   .4
                      00282      #define ERASE_FLASH_BLOCKSIZE   .16
                      00283      #define END_FLASH               0x400
                      00284      #define END_GPR                 0x200
                      00285 #endif
                      00286 
                      00287 #ifdef __16F636
                      00288      #include p16F636.inc
                      00289 
                      00290      #define DEVICEID                .133
                      00291      #define WRITE_FLASH_BLOCKSIZE   .4
                      00292      #define ERASE_FLASH_BLOCKSIZE   .16
                      00293      #define END_FLASH               0x800
                      00294      #define END_GPR                 0x200
                      00295 #endif
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00296 
                      00297 #ifdef __16F639
                      00298      #include p16F639.inc
                      00299 
                      00300      #define DEVICEID                .133
                      00301      #define WRITE_FLASH_BLOCKSIZE   .4
                      00302      #define ERASE_FLASH_BLOCKSIZE   .16
                      00303      #define END_FLASH               0x800
                      00304      #define END_GPR                 0x200
                      00305 #endif
                      00306 
                      00307 #ifdef __16F648A
                      00308      #include p16F648A.inc
                      00309 
                      00310      #define DEVICEID                .136
                      00311      #define WRITE_FLASH_BLOCKSIZE   .1
                      00312      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00313      #define END_FLASH               0x1000
                      00314      #define END_GPR                 0x200
                      00315 #endif
                      00316 
                      00317 #ifdef __16F676
                      00318      #include p16F676.inc
                      00319 
                      00320      #define DEVICEID                .135
                      00321      #define WRITE_FLASH_BLOCKSIZE   .1
                      00322      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00323      #define END_FLASH               0x400
                      00324      #define END_GPR                 0xE0
                      00325 #endif
                      00326 
                      00327 #ifdef __16F677
                      00328      #include p16F677.inc
                      00329 
                      00330      #define DEVICEID                .162
                      00331      #define WRITE_FLASH_BLOCKSIZE   .4
                      00332      #define ERASE_FLASH_BLOCKSIZE   .16
                      00333      #define END_FLASH               0x800
                      00334      #define END_GPR                 0x200
                      00335 #endif
                      00336 
                      00337 #ifdef __16F684
                      00338      #include p16F684.inc
                      00339 
                      00340      #define DEVICEID                .132
                      00341      #define WRITE_FLASH_BLOCKSIZE   .4
                      00342      #define ERASE_FLASH_BLOCKSIZE   .16
                      00343      #define END_FLASH               0x800
                      00344      #define END_GPR                 0x100
                      00345 #endif
                      00346 
                      00347 #ifdef __16F685
                      00348      #include p16F685.inc
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00349 
                      00350      #define DEVICEID                .37
                      00351      #define WRITE_FLASH_BLOCKSIZE   .4
                      00352      #define ERASE_FLASH_BLOCKSIZE   .16
                      00353      #define END_FLASH               0x1000
                      00354      #define END_GPR                 0x200
                      00355 #endif
                      00356 
                      00357 #ifdef __16F687
                      00358      #include p16F687.inc
                      00359 
                      00360      #define DEVICEID                .153
                      00361      #define WRITE_FLASH_BLOCKSIZE   .4
                      00362      #define ERASE_FLASH_BLOCKSIZE   .16
                      00363      #define END_FLASH               0x800
                      00364      #define END_GPR                 0x200
                      00365 #endif
                      00366 
                      00367 #ifdef __16F688
                      00368      #include p16F688.inc
                      00369 
                      00370      #define DEVICEID                .140
                      00371      #define WRITE_FLASH_BLOCKSIZE   .4
                      00372      #define ERASE_FLASH_BLOCKSIZE   .16
                      00373      #define END_FLASH               0x1000
                      00374      #define END_GPR                 0x200
                      00375 #endif
                      00376 
                      00377 #ifdef __16F689
                      00378      #include p16F689.inc
                      00379 
                      00380      #define DEVICEID                .154
                      00381      #define WRITE_FLASH_BLOCKSIZE   .4
                      00382      #define ERASE_FLASH_BLOCKSIZE   .16
                      00383      #define END_FLASH               0x1000
                      00384      #define END_GPR                 0x200
                      00385 #endif
                      00386 
                      00387 #ifdef __16F690
                      00388      #include p16F690.inc
                      00389 
                      00390      #define DEVICEID                .160
                      00391      #define WRITE_FLASH_BLOCKSIZE   .4
                      00392      #define ERASE_FLASH_BLOCKSIZE   .16
                      00393      #define END_FLASH               0x1000
                      00394      #define END_GPR                 0x200
                      00395 #endif
                      00396 
                      00397 #ifdef __16F707
                      00398      #include p16F707.inc
                      00399 
                      00400      #define DEVICEID                .214
                      00401      #define WRITE_FLASH_BLOCKSIZE   .8
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00402      #define ERASE_FLASH_BLOCKSIZE   .32
                      00403      #define END_FLASH               0x2000
                      00404      #define END_GPR                 0x200
                      00405 #endif
                      00406 
                      00407 #ifdef __16F716
                      00408      #include p16F716.inc
                      00409 
                      00410      #define DEVICEID                .138
                      00411      #define WRITE_FLASH_BLOCKSIZE   .4
                      00412      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00413      #define END_FLASH               0x800
                      00414      #define END_GPR                 0x100
                      00415 #endif
                      00416 
                      00417 #ifdef __16F720
                      00418      #include p16F720.inc
                      00419 
                      00420      #define DEVICEID                .224
                      00421      #define WRITE_FLASH_BLOCKSIZE   .32
                      00422      #define ERASE_FLASH_BLOCKSIZE   .32
                      00423      #define END_FLASH               0x800
                      00424      #define END_GPR                 0x200
                      00425 #endif
                      00426 
                      00427 #ifdef __16F721
                      00428      #include p16F721.inc
                      00429 
                      00430      #define DEVICEID                .225
                      00431      #define WRITE_FLASH_BLOCKSIZE   .32
                      00432      #define ERASE_FLASH_BLOCKSIZE   .32
                      00433      #define END_FLASH               0x1000
                      00434      #define END_GPR                 0x200
                      00435 #endif
                      00436 
                      00437 #ifdef __16F722
                      00438      #include p16F722.inc
                      00439 
                      00440      #define DEVICEID                .196
                      00441      #define WRITE_FLASH_BLOCKSIZE   .8
                      00442      #define ERASE_FLASH_BLOCKSIZE   .32
                      00443      #define END_FLASH               0x800
                      00444      #define END_GPR                 0x200
                      00445 #endif
                      00446 
                      00447 #ifdef __16F722A
                      00448      #include p16F722A.inc
                      00449 
                      00450      #define DEVICEID                .217
                      00451      #define WRITE_FLASH_BLOCKSIZE   .8
                      00452      #define ERASE_FLASH_BLOCKSIZE   .32
                      00453      #define END_FLASH               0x800
                      00454      #define END_GPR                 0x200
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00455 #endif
                      00456 
                      00457 #ifdef __16F723
                      00458      #include p16F723.inc
                      00459 
                      00460      #define DEVICEID                .195
                      00461      #define WRITE_FLASH_BLOCKSIZE   .8
                      00462      #define ERASE_FLASH_BLOCKSIZE   .32
                      00463      #define END_FLASH               0x1000
                      00464      #define END_GPR                 0x200
                      00465 #endif
                      00466 
                      00467 #ifdef __16F723A
                      00468      #include p16F723A.inc
                      00469 
                      00470      #define DEVICEID                .216
                      00471      #define WRITE_FLASH_BLOCKSIZE   .8
                      00472      #define ERASE_FLASH_BLOCKSIZE   .32
                      00473      #define END_FLASH               0x1000
                      00474      #define END_GPR                 0x200
                      00475 #endif
                      00476 
                      00477 #ifdef __16F724
                      00478      #include p16F724.inc
                      00479 
                      00480      #define DEVICEID                .194
                      00481      #define WRITE_FLASH_BLOCKSIZE   .8
                      00482      #define ERASE_FLASH_BLOCKSIZE   .32
                      00483      #define END_FLASH               0x1000
                      00484      #define END_GPR                 0x200
                      00485 #endif
                      00486 
                      00487 #ifdef __16F726
                      00488      #include p16F726.inc
                      00489 
                      00490      #define DEVICEID                .193
                      00491      #define WRITE_FLASH_BLOCKSIZE   .8
                      00492      #define ERASE_FLASH_BLOCKSIZE   .32
                      00493      #define END_FLASH               0x2000
                      00494      #define END_GPR                 0x200
                      00495 #endif
                      00496 
                      00497 #ifdef __16F727
                      00498      #include p16F727.inc
                      00499 
                      00500      #define DEVICEID                .192
                      00501      #define WRITE_FLASH_BLOCKSIZE   .8
                      00502      #define ERASE_FLASH_BLOCKSIZE   .32
                      00503      #define END_FLASH               0x2000
                      00504      #define END_GPR                 0x200
                      00505 #endif
                      00506 
                      00507 #ifdef __16F737
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00508      #include p16F737.inc
                      00509 
                      00510      #define DEVICEID                .93
                      00511      #define WRITE_FLASH_BLOCKSIZE   .2
                      00512      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00513      #define END_FLASH               0x1000
                      00514      #define END_GPR                 0x200
                      00515 #endif
                      00516 
                      00517 #ifdef __16F747
                      00518      #include p16F747.inc
                      00519 
                      00520      #define DEVICEID                .95
                      00521      #define WRITE_FLASH_BLOCKSIZE   .2
                      00522      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00523      #define END_FLASH               0x1000
                      00524      #define END_GPR                 0x200
                      00525 #endif
                      00526 
                      00527 #ifdef __16F767
                      00528      #include p16F767.inc
                      00529 
                      00530      #define DEVICEID                .117
                      00531      #define WRITE_FLASH_BLOCKSIZE   .2
                      00532      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00533      #define END_FLASH               0x2000
                      00534      #define END_GPR                 0x200
                      00535 #endif
                      00536 
                      00537 #ifdef __16F777
                      00538      #include p16F777.inc
                      00539 
                      00540      #define DEVICEID                .111
                      00541      #define WRITE_FLASH_BLOCKSIZE   .2
                      00542      #define ERASE_FLASH_BLOCKSIZE   .1024
                      00543      #define END_FLASH               0x2000
                      00544      #define END_GPR                 0x200
                      00545 #endif
                      00546 
                      00547 #ifdef __16F785
                      00548      #include p16F785.inc
                      00549 
                      00550      #define DEVICEID                .144
                      00551      #define WRITE_FLASH_BLOCKSIZE   .4
                      00552      #define ERASE_FLASH_BLOCKSIZE   .16
                      00553      #define END_FLASH               0x800
                      00554      #define END_GPR                 0x200
                      00555 #endif
                      00556 
                      00557 #ifdef __16F818
                      00558      #include p16F818.inc
                      00559 
                      00560      #define DEVICEID                .38
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00561      #define WRITE_FLASH_BLOCKSIZE   .4
                      00562      #define ERASE_FLASH_BLOCKSIZE   .32
                      00563      #define END_FLASH               0x400
                      00564      #define END_GPR                 0x200
                      00565 #endif
                      00566 
                      00567 #ifdef __16F819
                      00568      #include p16F819.inc
                      00569 
                      00570      #define DEVICEID                .39
                      00571      #define WRITE_FLASH_BLOCKSIZE   .4
                      00572      #define ERASE_FLASH_BLOCKSIZE   .32
                      00573      #define END_FLASH               0x800
                      00574      #define END_GPR                 0x200
                      00575 #endif
                      00576 
                      00577 #ifdef __16F870
                      00578      #include p16F870.inc
                      00579 
                      00580      #define DEVICEID                .104
                      00581      #define WRITE_FLASH_BLOCKSIZE   .1
                      00582      #define ERASE_FLASH_BLOCKSIZE   .1
                      00583      #define END_FLASH               0x800
                      00584      #define END_GPR                 0x200
                      00585 #endif
                      00586 
                      00587 #ifdef __16F871
                      00588      #include p16F871.inc
                      00589 
                      00590      #define DEVICEID                .105
                      00591      #define WRITE_FLASH_BLOCKSIZE   .1
                      00592      #define ERASE_FLASH_BLOCKSIZE   .1
                      00593      #define END_FLASH               0x800
                      00594      #define END_GPR                 0x200
                      00595 #endif
                      00596 
                      00597 #ifdef __16F872
                      00598      #include p16F872.inc
                      00599 
                      00600      #define DEVICEID                .71
                      00601      #define WRITE_FLASH_BLOCKSIZE   .1
                      00602      #define ERASE_FLASH_BLOCKSIZE   .1
                      00603      #define END_FLASH               0x800
                      00604      #define END_GPR                 0x200
                      00605 #endif
                      00606 
                      00607 #ifdef __16F873
                      00608      #include p16F873.inc
                      00609 
                      00610      #define DEVICEID                .75
                      00611      #define WRITE_FLASH_BLOCKSIZE   .1
                      00612      #define ERASE_FLASH_BLOCKSIZE   .1
                      00613      #define END_FLASH               0x1000
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00614      #define END_GPR                 0x200
                      00615 #endif
                      00616 
                      00617 #ifdef __16F873A
                      00618      #include p16F873A.inc
                      00619 
                      00620      #define DEVICEID                .114
                      00621      #define WRITE_FLASH_BLOCKSIZE   .8
                      00622      #define ERASE_FLASH_BLOCKSIZE   .8
                      00623      #define END_FLASH               0x1000
                      00624      #define END_GPR                 0x200
                      00625 #endif
                      00626 
                      00627 #ifdef __16F874
                      00628      #include p16F874.inc
                      00629 
                      00630      #define DEVICEID                .73
                      00631      #define WRITE_FLASH_BLOCKSIZE   .1
                      00632      #define ERASE_FLASH_BLOCKSIZE   .1
                      00633      #define END_FLASH               0x1000
                      00634      #define END_GPR                 0x200
                      00635 #endif
                      00636 
                      00637 #ifdef __16F874A
                      00638      #include p16F874A.inc
                      00639 
                      00640      #define DEVICEID                .115
                      00641      #define WRITE_FLASH_BLOCKSIZE   .8
                      00642      #define ERASE_FLASH_BLOCKSIZE   .8
                      00643      #define END_FLASH               0x1000
                      00644      #define END_GPR                 0x200
                      00645 #endif
                      00646 
                      00647 #ifdef __16F876
                      00648      #include p16F876.inc
                      00649 
                      00650      #define DEVICEID                .79
                      00651      #define WRITE_FLASH_BLOCKSIZE   .1
                      00652      #define ERASE_FLASH_BLOCKSIZE   .1
                      00653      #define END_FLASH               0x2000
                      00654      #define END_GPR                 0x200
                      00655 #endif
                      00656 
                      00657 #ifdef __16F876A
                      00658      #include p16F876A.inc
                      00659 
                      00660      #define DEVICEID                .112
                      00661      #define WRITE_FLASH_BLOCKSIZE   .8
                      00662      #define ERASE_FLASH_BLOCKSIZE   .8
                      00663      #define END_FLASH               0x2000
                      00664      #define END_GPR                 0x200
                      00665 #endif
                      00666 
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00667 #ifdef __16F877
                      00668      #include p16F877.inc
                      00669 
                      00670      #define DEVICEID                .77
                      00671      #define WRITE_FLASH_BLOCKSIZE   .1
                      00672      #define ERASE_FLASH_BLOCKSIZE   .1
                      00673      #define END_FLASH               0x2000
                      00674      #define END_GPR                 0x200
                      00675 #endif
                      00676 
                      00677 #ifdef __16F877A
                      00678      #include p16F877A.inc
                      00679 
                      00680      #define DEVICEID                .113
                      00681      #define WRITE_FLASH_BLOCKSIZE   .8
                      00682      #define ERASE_FLASH_BLOCKSIZE   .8
                      00683      #define END_FLASH               0x2000
                      00684      #define END_GPR                 0x200
                      00685 #endif
                      00686 
                      00687 #ifdef __16F882
                      00688      #include p16F882.inc
                      00689 
                      00690      #define DEVICEID                .256
                      00691      #define WRITE_FLASH_BLOCKSIZE   .4
                      00692      #define ERASE_FLASH_BLOCKSIZE   .16
                      00693      #define END_FLASH               0x800
                      00694      #define END_GPR                 0x200
                      00695 #endif
                      00696 
                      00697 #ifdef __16F883
                      00698      #include p16F883.inc
                      00699 
                      00700      #define DEVICEID                .257
                      00701      #define WRITE_FLASH_BLOCKSIZE   .4
                      00702      #define ERASE_FLASH_BLOCKSIZE   .16
                      00703      #define END_FLASH               0x1000
                      00704      #define END_GPR                 0x200
                      00705 #endif
                      00706 
                      00707 #ifdef __16F884
                      00708      #include p16F884.inc
                      00709 
                      00710      #define DEVICEID                .258
                      00711      #define WRITE_FLASH_BLOCKSIZE   .4
                      00712      #define ERASE_FLASH_BLOCKSIZE   .16
                      00713      #define END_FLASH               0x1000
                      00714      #define END_GPR                 0x200
                      00715 #endif
                      00716 
                      00717 #ifdef __16F886
                      00718      #include p16F886.inc
                      00719 
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00720      #define DEVICEID                .259
                      00721      #define WRITE_FLASH_BLOCKSIZE   .8
                      00722      #define ERASE_FLASH_BLOCKSIZE   .16
                      00723      #define END_FLASH               0x2000
                      00724      #define END_GPR                 0x200
                      00725 #endif
                      00726 
                      00727 #ifdef __16F887
                      00728      #include p16F887.inc
                      00729 
                      00730      #define DEVICEID                .260
                      00731      #define WRITE_FLASH_BLOCKSIZE   .8
                      00732      #define ERASE_FLASH_BLOCKSIZE   .16
                      00733      #define END_FLASH               0x2000
                      00734      #define END_GPR                 0x200
                      00735 #endif
                      00736 
                      00737 #ifdef __16F913
                      00738      #include p16F913.inc
                      00739 
                      00740      #define DEVICEID                .159
                      00741      #define WRITE_FLASH_BLOCKSIZE   .4
                      00742      #define ERASE_FLASH_BLOCKSIZE   .16
                      00743      #define END_FLASH               0x1000
                      00744      #define END_GPR                 0x200
                      00745 #endif
                      00746 
                      00747 #ifdef __16F914
                      00748      #include p16F914.inc
                      00749 
                      00750      #define DEVICEID                .158
                      00751      #define WRITE_FLASH_BLOCKSIZE   .4
                      00752      #define ERASE_FLASH_BLOCKSIZE   .16
                      00753      #define END_FLASH               0x1000
                      00754      #define END_GPR                 0x200
                      00755 #endif
                      00756 
                      00757 #ifdef __16F916
                      00758      #include p16F916.inc
                      00759 
                      00760      #define DEVICEID                .157
                      00761      #define WRITE_FLASH_BLOCKSIZE   .8
                      00762      #define ERASE_FLASH_BLOCKSIZE   .16
                      00763      #define END_FLASH               0x2000
                      00764      #define END_GPR                 0x200
                      00765 #endif
                      00766 
                      00767 #ifdef __16F917
                      00768      #include p16F917.inc
                      00769 
                      00770      #define DEVICEID                .156
                      00771      #define WRITE_FLASH_BLOCKSIZE   .8
                      00772      #define ERASE_FLASH_BLOCKSIZE   .16
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00773      #define END_FLASH               0x2000
                      00774      #define END_GPR                 0x200
                      00775 #endif
                      00776 
                      00777 #ifdef __16F946
                      00778      #include p16F946.inc
                      00779 
                      00780      #define DEVICEID                .163
                      00781      #define WRITE_FLASH_BLOCKSIZE   .8
                      00782      #define ERASE_FLASH_BLOCKSIZE   .16
                      00783      #define END_FLASH               0x2000
                      00784      #define END_GPR                 0x200
                      00785 #endif
                      00786 
                      00787 #ifdef __16F1507
                      00788      #include p16F1507.inc
                      00789 
                      00790      #define DEVICEID                .360
                      00791      #define WRITE_FLASH_BLOCKSIZE   .16
                      00792      #define ERASE_FLASH_BLOCKSIZE   .16
                      00793      #define END_FLASH               0x800
                      00794      #define END_GPR                 0x1000
                      00795 #endif
                      00796 
                      00797 #ifdef __16F1516
                      00798      #include p16F1516.inc
                      00799 
                      00800      #define DEVICEID                .180
                      00801      #define WRITE_FLASH_BLOCKSIZE   .32
                      00802      #define ERASE_FLASH_BLOCKSIZE   .32
                      00803      #define END_FLASH               0x2000
                      00804      #define END_GPR                 0x1000
                      00805 #endif
                      00806 
                      00807 #ifdef __16F1517
                      00808      #include p16F1517.inc
                      00809 
                      00810      #define DEVICEID                .181
                      00811      #define WRITE_FLASH_BLOCKSIZE   .32
                      00812      #define ERASE_FLASH_BLOCKSIZE   .32
                      00813      #define END_FLASH               0x2000
                      00814      #define END_GPR                 0x1000
                      00815 #endif
                      00816 
                      00817 #ifdef __16F1518
                      00818      #include p16F1518.inc
                      00819 
                      00820      #define DEVICEID                .182
                      00821      #define WRITE_FLASH_BLOCKSIZE   .32
                      00822      #define ERASE_FLASH_BLOCKSIZE   .32
                      00823      #define END_FLASH               0x4000
                      00824      #define END_GPR                 0x1000
                      00825 #endif
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00826 
                      00827 #ifdef __16F1519
                      00828      #include p16F1519.inc
                      00829 
                      00830      #define DEVICEID                .183
                      00831      #define WRITE_FLASH_BLOCKSIZE   .32
                      00832      #define ERASE_FLASH_BLOCKSIZE   .32
                      00833      #define END_FLASH               0x4000
                      00834      #define END_GPR                 0x1000
                      00835 #endif
                      00836 
                      00837 #ifdef __16F1526
                      00838      #include p16F1526.inc
                      00839 
                      00840      #define DEVICEID                .172
                      00841      #define WRITE_FLASH_BLOCKSIZE   .32
                      00842      #define ERASE_FLASH_BLOCKSIZE   .32
                      00843      #define END_FLASH               0x2000
                      00844      #define END_GPR                 0x1000
                      00845 #endif
                      00846 
                      00847 #ifdef __16F1527
                      00848      #include p16F1527.inc
                      00849 
                      00850      #define DEVICEID                .173
                      00851      #define WRITE_FLASH_BLOCKSIZE   .32
                      00852      #define ERASE_FLASH_BLOCKSIZE   .32
                      00853      #define END_FLASH               0x4000
                      00854      #define END_GPR                 0x1000
                      00855 #endif
                      00856 
                      00857 #ifdef __16F1782
                      00858      #include p16F1782.inc
                      00859 
                      00860      #define DEVICEID                .336
                      00861      #define WRITE_FLASH_BLOCKSIZE   .32
                      00862      #define ERASE_FLASH_BLOCKSIZE   .32
                      00863      #define END_FLASH               0x800
                      00864      #define END_GPR                 0x1000
                      00865 #endif
                      00866 
                      00867 #ifdef __16F1783
                      00868      #include p16F1783.inc
                      00869 
                      00870      #define DEVICEID                .337
                      00871      #define WRITE_FLASH_BLOCKSIZE   .32
                      00872      #define ERASE_FLASH_BLOCKSIZE   .32
                      00873      #define END_FLASH               0x1000
                      00874      #define END_GPR                 0x1000
                      00875 #endif
                      00876 
                      00877 #ifdef __16F1823
                      00878      #include p16F1823.inc
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00879 
                      00880      #define DEVICEID                .313
                      00881      #define WRITE_FLASH_BLOCKSIZE   .16
                      00882      #define ERASE_FLASH_BLOCKSIZE   .16
                      00883      #define END_FLASH               0x800
                      00884      #define END_GPR                 0x1000
                      00885 #endif
                      00886 
                      00887 #ifdef __16F1824
                      00888      #include p16F1824.inc
                      01266         LIST
                      01267 
                      01268 ;==========================================================================
                      01269 ; Build date : Mar 21 2016
                      01270 ;  MPASM PIC16F1824 processor include
                      01271 ; 
                      01272 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      01273 ;==========================================================================
                      01274 
Message[310]: Superseding current maximum RAM and RAM map.
                      02530         LIST
                      00889 
                      00890      #define DEVICEID                .314
                      00891      #define WRITE_FLASH_BLOCKSIZE   .32
                      00892      #define ERASE_FLASH_BLOCKSIZE   .32
                      00893      #define END_FLASH               0x1000
                      00894      #define END_GPR                 0x1000
                      00895 #endif
                      00896 
                      00897 #ifdef __16F1825
                      00898      #include p16F1825.inc
                      00899 
                      00900      #define DEVICEID                .315
                      00901      #define WRITE_FLASH_BLOCKSIZE   .32
                      00902      #define ERASE_FLASH_BLOCKSIZE   .32
                      00903      #define END_FLASH               0x2000
                      00904      #define END_GPR                 0x1000
                      00905 #endif
                      00906 
                      00907 #ifdef __16F1826
                      00908      #include p16F1826.inc
                      00909 
                      00910      #define DEVICEID                .316
                      00911      #define WRITE_FLASH_BLOCKSIZE   .8
                      00912      #define ERASE_FLASH_BLOCKSIZE   .32
                      00913      #define END_FLASH               0x800
                      00914      #define END_GPR                 0x1000
                      00915 #endif
                      00916 
                      00917 #ifdef __16F1827
                      00918      #include p16F1827.inc
                      00919 
                      00920      #define DEVICEID                .317
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00921      #define WRITE_FLASH_BLOCKSIZE   .8
                      00922      #define ERASE_FLASH_BLOCKSIZE   .32
                      00923      #define END_FLASH               0x1000
                      00924      #define END_GPR                 0x1000
                      00925 #endif
                      00926 
                      00927 #ifdef __16F1828
                      00928      #include p16F1828.inc
                      00929 
                      00930      #define DEVICEID                .318
                      00931      #define WRITE_FLASH_BLOCKSIZE   .32
                      00932      #define ERASE_FLASH_BLOCKSIZE   .32
                      00933      #define END_FLASH               0x1000
                      00934      #define END_GPR                 0x1000
                      00935 #endif
                      00936 
                      00937 #ifdef __16F1829
                      00938      #include p16F1829.inc
                      00939 
                      00940      #define DEVICEID                .319
                      00941      #define WRITE_FLASH_BLOCKSIZE   .32
                      00942      #define ERASE_FLASH_BLOCKSIZE   .32
                      00943      #define END_FLASH               0x2000
                      00944      #define END_GPR                 0x1000
                      00945 #endif
                      00946 
                      00947 #ifdef __16F1847
                      00948      #include p16F1847.inc
                      00949 
                      00950      #define DEVICEID                .164
                      00951      #define WRITE_FLASH_BLOCKSIZE   .32
                      00952      #define ERASE_FLASH_BLOCKSIZE   .32
                      00953      #define END_FLASH               0x2000
                      00954      #define END_GPR                 0x1000
                      00955 #endif
                      00956 
                      00957 #ifdef __16F1933
                      00958      #include p16F1933.inc
                      00959 
                      00960      #define DEVICEID                .280
                      00961      #define WRITE_FLASH_BLOCKSIZE   .8
                      00962      #define ERASE_FLASH_BLOCKSIZE   .32
                      00963      #define END_FLASH               0x1000
                      00964      #define END_GPR                 0x1000
                      00965 #endif
                      00966 
                      00967 #ifdef __16F1934
                      00968      #include p16F1934.inc
                      00969 
                      00970      #define DEVICEID                .282
                      00971      #define WRITE_FLASH_BLOCKSIZE   .8
                      00972      #define ERASE_FLASH_BLOCKSIZE   .32
                      00973      #define END_FLASH               0x1000
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00974      #define END_GPR                 0x1000
                      00975 #endif
                      00976 
                      00977 #ifdef __16F1936
                      00978      #include p16F1936.inc
                      00979 
                      00980      #define DEVICEID                .283
                      00981      #define WRITE_FLASH_BLOCKSIZE   .8
                      00982      #define ERASE_FLASH_BLOCKSIZE   .32
                      00983      #define END_FLASH               0x2000
                      00984      #define END_GPR                 0x1000
                      00985 #endif
                      00986 
                      00987 #ifdef __16F1937
                      00988      #include p16F1937.inc
                      00989 
                      00990      #define DEVICEID                .284
                      00991      #define WRITE_FLASH_BLOCKSIZE   .8
                      00992      #define ERASE_FLASH_BLOCKSIZE   .32
                      00993      #define END_FLASH               0x2000
                      00994      #define END_GPR                 0x1000
                      00995 #endif
                      00996 
                      00997 #ifdef __16F1938
                      00998      #include p16F1938.inc
                      00999 
                      01000      #define DEVICEID                .285
                      01001      #define WRITE_FLASH_BLOCKSIZE   .8
                      01002      #define ERASE_FLASH_BLOCKSIZE   .32
                      01003      #define END_FLASH               0x4000
                      01004      #define END_GPR                 0x1000
                      01005 #endif
                      01006 
                      01007 #ifdef __16F1939
                      01008      #include p16F1939.inc
                      01009 
                      01010      #define DEVICEID                .286
                      01011      #define WRITE_FLASH_BLOCKSIZE   .8
                      01012      #define ERASE_FLASH_BLOCKSIZE   .32
                      01013      #define END_FLASH               0x4000
                      01014      #define END_GPR                 0x1000
                      01015 #endif
                      01016 
                      01017 #ifdef __16F1946
                      01018      #include p16F1946.inc
                      01019 
                      01020      #define DEVICEID                .296
                      01021      #define WRITE_FLASH_BLOCKSIZE   .8
                      01022      #define ERASE_FLASH_BLOCKSIZE   .32
                      01023      #define END_FLASH               0x2000
                      01024      #define END_GPR                 0x1000
                      01025 #endif
                      01026 
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01027 #ifdef __16F1947
                      01028      #include p16F1947.inc
                      01029 
                      01030      #define DEVICEID                .297
                      01031      #define WRITE_FLASH_BLOCKSIZE   .8
                      01032      #define ERASE_FLASH_BLOCKSIZE   .32
                      01033      #define END_FLASH               0x4000
                      01034      #define END_GPR                 0x1000
                      01035 #endif
                      01036 
                      01037 ; PIC16HV610 does not support self-programming.
                      01038 ; PIC16HV616 does not support self-programming.
                      01039 #ifdef __16HV785
                      01040      #include p16HV785.inc
                      01041 
                      01042      #define DEVICEID                .145
                      01043      #define WRITE_FLASH_BLOCKSIZE   .4
                      01044      #define ERASE_FLASH_BLOCKSIZE   .16
                      01045      #define END_FLASH               0x800
                      01046      #define END_GPR                 0x200
                      01047 #endif
                      01048 
                      01049 #ifdef __16LF707
                      01050      #include p16LF707.inc
                      01051 
                      01052      #define DEVICEID                .215
                      01053      #define WRITE_FLASH_BLOCKSIZE   .8
                      01054      #define ERASE_FLASH_BLOCKSIZE   .32
                      01055      #define END_FLASH               0x2000
                      01056      #define END_GPR                 0x200
                      01057 #endif
                      01058 
                      01059 #ifdef __16LF720
                      01060      #include p16LF720.inc
                      01061 
                      01062      #define DEVICEID                .226
                      01063      #define WRITE_FLASH_BLOCKSIZE   .32
                      01064      #define ERASE_FLASH_BLOCKSIZE   .32
                      01065      #define END_FLASH               0x800
                      01066      #define END_GPR                 0x200
                      01067 #endif
                      01068 
                      01069 #ifdef __16LF721
                      01070      #include p16LF721.inc
                      01071 
                      01072      #define DEVICEID                .227
                      01073      #define WRITE_FLASH_BLOCKSIZE   .32
                      01074      #define ERASE_FLASH_BLOCKSIZE   .32
                      01075      #define END_FLASH               0x1000
                      01076      #define END_GPR                 0x200
                      01077 #endif
                      01078 
                      01079 #ifdef __16LF722
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01080      #include p16LF722.inc
                      01081 
                      01082      #define DEVICEID                .204
                      01083      #define WRITE_FLASH_BLOCKSIZE   .8
                      01084      #define ERASE_FLASH_BLOCKSIZE   .32
                      01085      #define END_FLASH               0x800
                      01086      #define END_GPR                 0x200
                      01087 #endif
                      01088 
                      01089 #ifdef __16LF722A
                      01090      #include p16LF722A.inc
                      01091 
                      01092      #define DEVICEID                .219
                      01093      #define WRITE_FLASH_BLOCKSIZE   .8
                      01094      #define ERASE_FLASH_BLOCKSIZE   .32
                      01095      #define END_FLASH               0x800
                      01096      #define END_GPR                 0x200
                      01097 #endif
                      01098 
                      01099 #ifdef __16LF723
                      01100      #include p16LF723.inc
                      01101 
                      01102      #define DEVICEID                .203
                      01103      #define WRITE_FLASH_BLOCKSIZE   .8
                      01104      #define ERASE_FLASH_BLOCKSIZE   .32
                      01105      #define END_FLASH               0x1000
                      01106      #define END_GPR                 0x200
                      01107 #endif
                      01108 
                      01109 #ifdef __16LF723A
                      01110      #include p16LF723A.inc
                      01111 
                      01112      #define DEVICEID                .218
                      01113      #define WRITE_FLASH_BLOCKSIZE   .8
                      01114      #define ERASE_FLASH_BLOCKSIZE   .32
                      01115      #define END_FLASH               0x1000
                      01116      #define END_GPR                 0x200
                      01117 #endif
                      01118 
                      01119 #ifdef __16LF724
                      01120      #include p16LF724.inc
                      01121 
                      01122      #define DEVICEID                .202
                      01123      #define WRITE_FLASH_BLOCKSIZE   .8
                      01124      #define ERASE_FLASH_BLOCKSIZE   .32
                      01125      #define END_FLASH               0x1000
                      01126      #define END_GPR                 0x200
                      01127 #endif
                      01128 
                      01129 #ifdef __16LF726
                      01130      #include p16LF726.inc
                      01131 
                      01132      #define DEVICEID                .201
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01133      #define WRITE_FLASH_BLOCKSIZE   .8
                      01134      #define ERASE_FLASH_BLOCKSIZE   .32
                      01135      #define END_FLASH               0x2000
                      01136      #define END_GPR                 0x200
                      01137 #endif
                      01138 
                      01139 #ifdef __16LF727
                      01140      #include p16LF727.inc
                      01141 
                      01142      #define DEVICEID                .200
                      01143      #define WRITE_FLASH_BLOCKSIZE   .8
                      01144      #define ERASE_FLASH_BLOCKSIZE   .32
                      01145      #define END_FLASH               0x2000
                      01146      #define END_GPR                 0x200
                      01147 #endif
                      01148 
                      01149 #ifdef __16LF1507
                      01150      #include p16LF1507.inc
                      01151 
                      01152      #define DEVICEID                .360
                      01153      #define WRITE_FLASH_BLOCKSIZE   .16
                      01154      #define ERASE_FLASH_BLOCKSIZE   .16
                      01155      #define END_FLASH               0x800
                      01156      #define END_GPR                 0x1000
                      01157 #endif
                      01158 
                      01159 #ifdef __16LF1516
                      01160      #include p16LF1516.inc
                      01161 
                      01162      #define DEVICEID                .188
                      01163      #define WRITE_FLASH_BLOCKSIZE   .32
                      01164      #define ERASE_FLASH_BLOCKSIZE   .32
                      01165      #define END_FLASH               0x2000
                      01166      #define END_GPR                 0x1000
                      01167 #endif
                      01168 
                      01169 #ifdef __16LF1517
                      01170      #include p16LF1517.inc
                      01171 
                      01172      #define DEVICEID                .189
                      01173      #define WRITE_FLASH_BLOCKSIZE   .32
                      01174      #define ERASE_FLASH_BLOCKSIZE   .32
                      01175      #define END_FLASH               0x2000
                      01176      #define END_GPR                 0x1000
                      01177 #endif
                      01178 
                      01179 #ifdef __16LF1518
                      01180      #include p16LF1518.inc
                      01181 
                      01182      #define DEVICEID                .190
                      01183      #define WRITE_FLASH_BLOCKSIZE   .32
                      01184      #define ERASE_FLASH_BLOCKSIZE   .32
                      01185      #define END_FLASH               0x4000
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01186      #define END_GPR                 0x1000
                      01187 #endif
                      01188 
                      01189 #ifdef __16LF1519
                      01190      #include p16LF1519.inc
                      01191 
                      01192      #define DEVICEID                .191
                      01193      #define WRITE_FLASH_BLOCKSIZE   .32
                      01194      #define ERASE_FLASH_BLOCKSIZE   .32
                      01195      #define END_FLASH               0x4000
                      01196      #define END_GPR                 0x1000
                      01197 #endif
                      01198 
                      01199 #ifdef __16LF1526
                      01200      #include p16LF1526.inc
                      01201 
                      01202      #define DEVICEID                .174
                      01203      #define WRITE_FLASH_BLOCKSIZE   .32
                      01204      #define ERASE_FLASH_BLOCKSIZE   .32
                      01205      #define END_FLASH               0x2000
                      01206      #define END_GPR                 0x1000
                      01207 #endif
                      01208 
                      01209 #ifdef __16LF1527
                      01210      #include p16LF1527.inc
                      01211 
                      01212      #define DEVICEID                .175
                      01213      #define WRITE_FLASH_BLOCKSIZE   .32
                      01214      #define ERASE_FLASH_BLOCKSIZE   .32
                      01215      #define END_FLASH               0x4000
                      01216      #define END_GPR                 0x1000
                      01217 #endif
                      01218 
                      01219 #ifdef __16LF1782
                      01220      #include p16LF1782.inc
                      01221 
                      01222      #define DEVICEID                .341
                      01223      #define WRITE_FLASH_BLOCKSIZE   .32
                      01224      #define ERASE_FLASH_BLOCKSIZE   .32
                      01225      #define END_FLASH               0x800
                      01226      #define END_GPR                 0x1000
                      01227 #endif
                      01228 
                      01229 #ifdef __16LF1783
                      01230      #include p16LF1783.inc
                      01231 
                      01232      #define DEVICEID                .342
                      01233      #define WRITE_FLASH_BLOCKSIZE   .32
                      01234      #define ERASE_FLASH_BLOCKSIZE   .32
                      01235      #define END_FLASH               0x1000
                      01236      #define END_GPR                 0x1000
                      01237 #endif
                      01238 
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01239 #ifdef __16LF1823
                      01240      #include p16LF1823.inc
                      01241 
                      01242      #define DEVICEID                .321
                      01243      #define WRITE_FLASH_BLOCKSIZE   .16
                      01244      #define ERASE_FLASH_BLOCKSIZE   .16
                      01245      #define END_FLASH               0x800
                      01246      #define END_GPR                 0x1000
                      01247 #endif
                      01248 
                      01249 #ifdef __16LF1824
                      01250      #include p16LF1824.inc
                      01251 
                      01252      #define DEVICEID                .322
                      01253      #define WRITE_FLASH_BLOCKSIZE   .32
                      01254      #define ERASE_FLASH_BLOCKSIZE   .32
                      01255      #define END_FLASH               0x1000
                      01256      #define END_GPR                 0x1000
                      01257 #endif
                      01258 
                      01259 #ifdef __16LF1825
                      01260      #include p16LF1825.inc
                      01261 
                      01262      #define DEVICEID                .323
                      01263      #define WRITE_FLASH_BLOCKSIZE   .32
                      01264      #define ERASE_FLASH_BLOCKSIZE   .32
                      01265      #define END_FLASH               0x2000
                      01266      #define END_GPR                 0x1000
                      01267 #endif
                      01268 
                      01269 #ifdef __16LF1826
                      01270      #include p16LF1826.inc
                      01271 
                      01272      #define DEVICEID                .324
                      01273      #define WRITE_FLASH_BLOCKSIZE   .8
                      01274      #define ERASE_FLASH_BLOCKSIZE   .32
                      01275      #define END_FLASH               0x800
                      01276      #define END_GPR                 0x1000
                      01277 #endif
                      01278 
                      01279 #ifdef __16LF1827
                      01280      #include p16LF1827.inc
                      01281 
                      01282      #define DEVICEID                .325
                      01283      #define WRITE_FLASH_BLOCKSIZE   .8
                      01284      #define ERASE_FLASH_BLOCKSIZE   .32
                      01285      #define END_FLASH               0x1000
                      01286      #define END_GPR                 0x1000
                      01287 #endif
                      01288 
                      01289 #ifdef __16LF1828
                      01290      #include p16LF1828.inc
                      01291 
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01292      #define DEVICEID                .326
                      01293      #define WRITE_FLASH_BLOCKSIZE   .32
                      01294      #define ERASE_FLASH_BLOCKSIZE   .32
                      01295      #define END_FLASH               0x1000
                      01296      #define END_GPR                 0x1000
                      01297 #endif
                      01298 
                      01299 #ifdef __16LF1829
                      01300      #include p16LF1829.inc
                      01301 
                      01302      #define DEVICEID                .327
                      01303      #define WRITE_FLASH_BLOCKSIZE   .32
                      01304      #define ERASE_FLASH_BLOCKSIZE   .32
                      01305      #define END_FLASH               0x2000
                      01306      #define END_GPR                 0x1000
                      01307 #endif
                      01308 
                      01309 #ifdef __16LF1847
                      01310      #include p16LF1847.inc
                      01311 
                      01312      #define DEVICEID                .165
                      01313      #define WRITE_FLASH_BLOCKSIZE   .32
                      01314      #define ERASE_FLASH_BLOCKSIZE   .32
                      01315      #define END_FLASH               0x2000
                      01316      #define END_GPR                 0x1000
                      01317 #endif
                      01318 
                      01319 #ifdef __16LF1902
                      01320      #include p16LF1902.inc
                      01321 
                      01322      #define DEVICEID                .353
                      01323      #define WRITE_FLASH_BLOCKSIZE   .8
                      01324      #define ERASE_FLASH_BLOCKSIZE   .32
                      01325      #define END_FLASH               0x800
                      01326      #define END_GPR                 0x1000
                      01327 #endif
                      01328 
                      01329 #ifdef __16LF1903
                      01330      #include p16LF1903.inc
                      01331 
                      01332      #define DEVICEID                .352
                      01333      #define WRITE_FLASH_BLOCKSIZE   .8
                      01334      #define ERASE_FLASH_BLOCKSIZE   .32
                      01335      #define END_FLASH               0x1000
                      01336      #define END_GPR                 0x1000
                      01337 #endif
                      01338 
                      01339 #ifdef __16LF1904
                      01340      #include p16LF1904.inc
                      01341 
                      01342      #define DEVICEID                .356
                      01343      #define WRITE_FLASH_BLOCKSIZE   .8
                      01344      #define ERASE_FLASH_BLOCKSIZE   .32
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01345      #define END_FLASH               0x1000
                      01346      #define END_GPR                 0x1000
                      01347 #endif
                      01348 
                      01349 #ifdef __16LF1906
                      01350      #include p16LF1906.inc
                      01351 
                      01352      #define DEVICEID                .355
                      01353      #define WRITE_FLASH_BLOCKSIZE   .8
                      01354      #define ERASE_FLASH_BLOCKSIZE   .32
                      01355      #define END_FLASH               0x2000
                      01356      #define END_GPR                 0x1000
                      01357 #endif
                      01358 
                      01359 #ifdef __16LF1907
                      01360      #include p16LF1907.inc
                      01361 
                      01362      #define DEVICEID                .354
                      01363      #define WRITE_FLASH_BLOCKSIZE   .8
                      01364      #define ERASE_FLASH_BLOCKSIZE   .32
                      01365      #define END_FLASH               0x2000
                      01366      #define END_GPR                 0x1000
                      01367 #endif
                      01368 
                      01369 #ifdef __16LF1933
                      01370      #include p16LF1933.inc
                      01371 
                      01372      #define DEVICEID                .288
                      01373      #define WRITE_FLASH_BLOCKSIZE   .8
                      01374      #define ERASE_FLASH_BLOCKSIZE   .32
                      01375      #define END_FLASH               0x1000
                      01376      #define END_GPR                 0x1000
                      01377 #endif
                      01378 
                      01379 #ifdef __16LF1934
                      01380      #include p16LF1934.inc
                      01381 
                      01382      #define DEVICEID                .290
                      01383      #define WRITE_FLASH_BLOCKSIZE   .8
                      01384      #define ERASE_FLASH_BLOCKSIZE   .32
                      01385      #define END_FLASH               0x1000
                      01386      #define END_GPR                 0x1000
                      01387 #endif
                      01388 
                      01389 #ifdef __16LF1936
                      01390      #include p16LF1936.inc
                      01391 
                      01392      #define DEVICEID                .291
                      01393      #define WRITE_FLASH_BLOCKSIZE   .8
                      01394      #define ERASE_FLASH_BLOCKSIZE   .32
                      01395      #define END_FLASH               0x2000
                      01396      #define END_GPR                 0x1000
                      01397 #endif
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01398 
                      01399 #ifdef __16LF1937
                      01400      #include p16LF1937.inc
                      01401 
                      01402      #define DEVICEID                .292
                      01403      #define WRITE_FLASH_BLOCKSIZE   .8
                      01404      #define ERASE_FLASH_BLOCKSIZE   .32
                      01405      #define END_FLASH               0x2000
                      01406      #define END_GPR                 0x1000
                      01407 #endif
                      01408 
                      01409 #ifdef __16LF1938
                      01410      #include p16LF1938.inc
                      01411 
                      01412      #define DEVICEID                .293
                      01413      #define WRITE_FLASH_BLOCKSIZE   .8
                      01414      #define ERASE_FLASH_BLOCKSIZE   .32
                      01415      #define END_FLASH               0x4000
                      01416      #define END_GPR                 0x1000
                      01417 #endif
                      01418 
                      01419 #ifdef __16LF1939
                      01420      #include p16LF1939.inc
                      01421 
                      01422      #define DEVICEID                .294
                      01423      #define WRITE_FLASH_BLOCKSIZE   .8
                      01424      #define ERASE_FLASH_BLOCKSIZE   .32
                      01425      #define END_FLASH               0x4000
                      01426      #define END_GPR                 0x1000
                      01427 #endif
                      01428 
                      01429 #ifdef __16LF1946
                      01430      #include p16LF1946.inc
                      01431 
                      01432      #define DEVICEID                .300
                      01433      #define WRITE_FLASH_BLOCKSIZE   .8
                      01434      #define ERASE_FLASH_BLOCKSIZE   .32
                      01435      #define END_FLASH               0x2000
                      01436      #define END_GPR                 0x1000
                      01437 #endif
                      00066 #include "bootconfig.inc"
                      00001 ; Copyright (c) 2002-2011,  Microchip Technology Inc.
                      00002 ;
                      00003 ; Microchip licenses this software to you solely for use with Microchip
                      00004 ; products.  The software is owned by Microchip and its licensors, and
                      00005 ; is protected under applicable copyright laws.  All rights reserved.
                      00006 ;
                      00007 ; SOFTWARE IS PROVIDED "AS IS."  MICROCHIP EXPRESSLY DISCLAIMS ANY
                      00008 ; WARRANTY OF ANY KIND, WHETHER EXPRESS OR IMPLIED, INCLUDING BUT
                      00009 ; NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
                      00010 ; FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL
                      00011 ; MICROCHIP BE LIABLE FOR ANY INCIDENTAL, SPECIAL, INDIRECT OR
                      00012 ; CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, HARM TO YOUR
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00013 ; EQUIPMENT, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY
                      00014 ; OR SERVICES, ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED
                      00015 ; TO ANY DEFENSE THEREOF), ANY CLAIMS FOR INDEMNITY OR CONTRIBUTION,
                      00016 ; OR OTHER SIMILAR COSTS.
                      00017 ;
                      00018 ; To the fullest extent allowed by law, Microchip and its licensors
                      00019 ; liability shall not exceed the amount of fees, if any, that you
                      00020 ; have paid directly to Microchip to use this software.
                      00021 ;
                      00022 ; MICROCHIP PROVIDES THIS SOFTWARE CONDITIONALLY UPON YOUR ACCEPTANCE
                      00023 ; OF THESE TERMS.
                      00024 
                      00025 #define USE_SOFTBOOTWP          ; enable software boot block write protection
                      00026 ;#define USE_MAX_INTOSC          ; Sets OSCCON<IRCF3:IRCF0> for maximum INTOSC frequency (16MHz)
                      00027 ;#define USE_PLL                 ; Sets OSCCON.SPLLEN bit at start up for frequency multiplication.
                      00028 ;#define INVERT_UART             ; If you don't have an RS232 transceiver, you might want this option
                      00029 ;#define USE_ALTERNATE_PINS      ; Sets APFCON<RXDTSEL> and APFCON<TXCKSEL> for alternate UART pin usage
                      00030 
                      00031 ; Most devices have the UART on TX/RC6 and RX/RC7 pins (default unless explicitly specified here).
                      00032 ;#define RXPORT  PORTC
                      00033 ;#define RXPIN   RC7
                      00034 ;#define TXTRIS  TRISC
                      00035 ;#define TXPIN   RC6
                      00036 
                      00037 ; Bootloader must start at the beginning of a FLASH erase block. If unspecified,
                      00038 ; bootloader will automatically be located at the end of program memory address space.
                      00039 ;#define BOOTLOADER_ADDRESS   END_FLASH - (ERASE_FLASH_BLOCKSIZE * 38) ; useful for running under debugg
                            er (debug executive wants to reside at the end of memory space too)
                      00040 ;#define BOOTLOADER_ADDRESS   0          ; bootloader at beginning, application start/ISR vectors requir
                            e remapping
                      00041 
                      00042 #ifdef BOOTLOADER_ADDRESS
                      00043   #if BOOTLOADER_ADDRESS == 0
                      00044     ; For Bootloader located at program memory address 0, the application firmware must 
                      00045     ; provide remapped reset and interrupt vectors outside of the Boot Block. The following 
                      00046     ; #defines tell the bootloader firmware where application entry points are to be expected:
                      00047     #define AppVector           0x400   ; remapped application start up code should be located here.
                      00048     #define AppIntVector        0x404   ; remapped application interrupt handler should be located here
                      00049   #endif
                      00050 #endif
                      00051 
                      00052 #ifndef AppVector 
                      00053     ; The application startup GOTO instructions will be written just before the Boot Block,
                      00054     ; courtesy of the host PC bootloader application.
                      00055     #define AppVector (BootloaderStart-.5)
                      00056 #endif
                      00057 
                      00058 ; Because we need to know the total size of the bootloader before the assembler has finished
                      00059 ; compiling the source code, you must estimate the final bootloader size and write it down 
                      00060 ; here ahead of time. This number is in words (one word per instruction).
                      00061 ;#define BOOTLOADERSIZE  .434
                      00062 #define BOOTLOADERSIZE  .463
                      00063     
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00064 #define MAJOR_VERSION   .1              ; Bootloader Firmware Version
                      00065 #define MINOR_VERSION   .5
                      00066 
                      00067 #include "bankswitch.inc"
                      00001 ; Copyright (c) 2009,  Microchip Technology Inc.
                      00002 ;
                      00003 ; Microchip licenses this software to you solely for use with Microchip
                      00004 ; products.  The software is owned by Microchip and its licensors, and
                      00005 ; is protected under applicable copyright laws.  All rights reserved.
                      00006 ;
                      00007 ; SOFTWARE IS PROVIDED "AS IS."  MICROCHIP EXPRESSLY DISCLAIMS ANY
                      00008 ; WARRANTY OF ANY KIND, WHETHER EXPRESS OR IMPLIED, INCLUDING BUT
                      00009 ; NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
                      00010 ; FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL
                      00011 ; MICROCHIP BE LIABLE FOR ANY INCIDENTAL, SPECIAL, INDIRECT OR
                      00012 ; CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, HARM TO YOUR
                      00013 ; EQUIPMENT, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY
                      00014 ; OR SERVICES, ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED
                      00015 ; TO ANY DEFENSE THEREOF), ANY CLAIMS FOR INDEMNITY OR CONTRIBUTION,
                      00016 ; OR OTHER SIMILAR COSTS.
                      00017 ;
                      00018 ; To the fullest extent allowed by law, Microchip and its licensors
                      00019 ; liability shall not exceed the amount of fees, if any, that you
                      00020 ; have paid directly to Microchip to use this software.
                      00021 ;
                      00022 ; MICROCHIP PROVIDES THIS SOFTWARE CONDITIONALLY UPON YOUR ACCEPTANCE
                      00023 ; OF THESE TERMS.
                      00024 ;
                      00025 ; Author        Date        Comment
                      00026 ; ************************************************************************
                      00027 ; E. Schlunder  06/09/2009  Starting to move all bank switching code to
                      00028 ;                           macros in this include file. This will 
                      00029 ;                           allow us to support the enhanced PIC16F core
                      00030 ;                           devices, which use a "movlb" instruction
                      00031 ;                           instead of STATUS<RP0/RP1> bits.
                      00032 
                      00033 #ifdef BSR
                      00034     ; Enhanced PIC16F core, use movlb instruction instead of diddling STATUS<RP0/RP1>
                      00035 BXtoB0  macro
                      00036     movlb   .0                      ; Bx -> B0
                      00037         endm
                      00038 
                      00039 B0toB1  macro
                      00040     movlb   .1                      ; Bx -> B1
                      00041         endm
                      00042 
                      00043 B0toB2  macro
                      00044     movlb   .2                      ; Bx -> B2
                      00045         endm
                      00046 
                      00047 B1toB0  macro
                      00048     movlb   .0                      ; Bx -> B0
                      00049         endm
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00050 
                      00051 B1toB3  macro
                      00052     movlb   .3                      ; Bx -> B3
                      00053         endm
                      00054 
                      00055 B2toB3  macro
                      00056     movlb   .3                      ; Bx -> B3
                      00057         endm
                      00058 
                      00059 B3toB2  macro
                      00060     movlb   .2                      ; Bx -> B2
                      00061         endm
                      00062 
                      00063 B2toB0  macro
                      00064     movlb   .0                      ; Bx -> B0
                      00065         endm
                      00066 
                      00067 lfsr    macro   GPRADDR
                      00068     movlw   low(GPRADDR)
                      00069     movwf   FSR0L
                      00070     movlw   high(GPRADDR)
                      00071     movwf   FSR0H
                      00072         endm
                      00073 
                      00074     #ifndef INDF
                      00075         #ifdef INDF0
                      00076             #define INDF INDF0
                      00077         #endif
                      00078     #endif
                      00079 
                      00080     #ifndef FSR
                      00081         #define FSR FSR0L
                      00082     #endif
                      00083 
                      00084     #ifndef BAUDCTL
                      00085         #define BAUDCTL BAUDCON
                      00086     #endif
                      00087 #else  
                      00088     ; Original PIC16F core, no movlb instruction
                      00089 
                      00090 BXtoB0  macro
                      00091     clrf    STATUS                  ; Bx -> B0
                      00092         endm
                      00093 
                      00094 B0toB1  macro
                      00095     bsf     STATUS, RP0             ; B0 -> B1
                      00096         endm
                      00097 
                      00098 B0toB2  macro
                      00099     bsf     STATUS, RP1             ; B0 -> B2
                      00100         endm
                      00101 
                      00102 B2toB0  macro
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00103     bcf     STATUS, RP1             ; B2 -> B0
                      00104         endm
                      00105 
                      00106 B1toB0  macro
                      00107     bcf     STATUS, RP0             ; B1 -> B0
                      00108         endm
                      00109 
                      00110 B1toB3  macro
                      00111     bsf     STATUS, RP1             ; B1 -> B3
                      00112         endm
                      00113 
                      00114 B2toB3  macro
                      00115     bsf     STATUS, RP0             ; B2 -> B3
                      00116         endm
                      00117 
                      00118 B3toB2  macro
                      00119     bcf     STATUS, RP0             ; B3 to B2
                      00120         endm
                      00121 
                      00122 lfsr    macro   GPRADDR
                      00123     movlw   GPRADDR
                      00124     movwf   FSR
                      00125         endm
                      00126 #endif
                      00127 
                      00128 #ifndef EEDATA
                      00129     #ifdef EEDATL
                      00130         #define EEDATA EEDATL
                      00131     #else
                      00132         #define EEDATA EEDAT
                      00133     #endif
                      00134 #endif
                      00068 #include "preprocess.inc"
                      00001 ; Copyright (c) 2002-2011,  Microchip Technology Inc.
                      00002 ;
                      00003 ; Microchip licenses this software to you solely for use with Microchip
                      00004 ; products.  The software is owned by Microchip and its licensors, and
                      00005 ; is protected under applicable copyright laws.  All rights reserved.
                      00006 ;
                      00007 ; SOFTWARE IS PROVIDED "AS IS."  MICROCHIP EXPRESSLY DISCLAIMS ANY
                      00008 ; WARRANTY OF ANY KIND, WHETHER EXPRESS OR IMPLIED, INCLUDING BUT
                      00009 ; NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
                      00010 ; FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL
                      00011 ; MICROCHIP BE LIABLE FOR ANY INCIDENTAL, SPECIAL, INDIRECT OR
                      00012 ; CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, HARM TO YOUR
                      00013 ; EQUIPMENT, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY
                      00014 ; OR SERVICES, ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED
                      00015 ; TO ANY DEFENSE THEREOF), ANY CLAIMS FOR INDEMNITY OR CONTRIBUTION,
                      00016 ; OR OTHER SIMILAR COSTS.
                      00017 ;
                      00018 ; To the fullest extent allowed by law, Microchip and its licensors
                      00019 ; liability shall not exceed the amount of fees, if any, that you
                      00020 ; have paid directly to Microchip to use this software.
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00021 ;
                      00022 ; MICROCHIP PROVIDES THIS SOFTWARE CONDITIONALLY UPON YOUR ACCEPTANCE
                      00023 ; OF THESE TERMS.
                      00024 
                      00025 #ifndef RXPORT
                      00026     #ifdef __16F1828
                      00027         #ifdef USE_ALTERNATE_PINS
                      00028             ; UART option for TX/RC4 and RX/RC5 pins.
                      00029             #define RXPORT  PORTC
                      00030             #define RXPIN   RC5
                      00031             #define TXTRIS  TRISC
                      00032             #define TXPIN   RC4
                      00033         #else
                      00034             ; UART default on TX/RB7 and RX/RB5 pins.
                      00035             #define RXPORT  PORTB
                      00036             #define RXPIN   RB5
                      00037             #define TXTRIS  TRISB
                      00038             #define TXPIN   RB7
                      00039         #endif
                      00040     #endif
                      00041     #ifdef __16LF1828
                      00042         #ifdef USE_ALTERNATE_PINS
                      00043             ; UART option for TX/RC4 and RX/RC5 pins.
                      00044             #define RXPORT  PORTC
                      00045             #define RXPIN   RC5
                      00046             #define TXTRIS  TRISC
                      00047             #define TXPIN   RC4
                      00048         #else
                      00049             ; UART default on TX/RB7 and RX/RB5 pins.
                      00050             #define RXPORT  PORTB
                      00051             #define RXPIN   RB5
                      00052             #define TXTRIS  TRISB
                      00053             #define TXPIN   RB7
                      00054         #endif
                      00055     #endif
                      00056 #endif
                      00057 
                      00058 #ifndef RXPORT
                      00059     #ifdef PORTC
                      00060         #ifdef RXDTSEL
                      00061             #ifdef USE_ALTERNATE_PINS
                      00062                 ; Some 14-pin devices have UART option for TX/RA0 and RX/RA1 pins. (PIC16F18xx)
                      00063                 #define RXPORT  PORTA
                      00064                 #define RXPIN   RA1
                      00065                 #define TXTRIS  TRISA
                      00066                 #define TXPIN   RA0
                      00067             #else
                      00068                 #ifndef RC7
                      00069                     ; Some 14-pin devices have the UART on TX/RC4 and RX/RC5 pins. (PIC16F18xx)
                      00070                     #define RXPORT  PORTC
                      00071                     #define RXPIN   RC5
                      00072                     #define TXTRIS  TRISC
                      00073                     #define TXPIN   RC4
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00074                 #else
                      00075                     ; Most devices have the UART on TX/RC6 and RX/RC7 pins.
                      00076                     #define RXPORT  PORTC
                      00077                     #define RXPIN   RC7
                      00078                     #define TXTRIS  TRISC
                      00079                     #define TXPIN   RC6
                      00080                 #endif            
                      00081             #endif
                      00082         #else
                      00083             ; Most devices have the UART on TX/RC6 and RX/RC7 pins.
                      00084             #define RXPORT  PORTC
                      00085             #define RXPIN   RC7
                      00086             #define TXTRIS  TRISC
                      00087             #define TXPIN   RC6
                      00088         #endif
                      00089     #else
                      00090         #ifdef RXDTSEL
                      00091             #ifdef USE_ALTERNATE_PINS
                      00092                 ; Some 8-pin devices have UART option for TX/RA4 and RX/RA5 pins. (PIC12F1822)
                      00093                 #define RXPORT  PORTA
                      00094                 #define RXPIN   RA5
                      00095                 #define TXTRIS  TRISA
                      00096                 #define TXPIN   RA4
                      00097             #else
                      00098                 ; Some 8-pin devices have UART on TX/RA0 and RX/RA1 pins. (PIC12F1822)
                      00099                 #define RXPORT  PORTA
                      00100                 #define RXPIN   RA1
                      00101                 #define TXTRIS  TRISA
                      00102                 #define TXPIN   RA0
                      00103             #endif
                      00104         #else
                      00105             ; PIC16F88 doesn't have PORTC, so the UART pins are on RX/RB2 and TX/RB5
                      00106             #define RXPORT  PORTB
                      00107             #define RXPIN   2
                      00108             #define TXTRIS  TRISB
                      00109             #define TXPIN   5    
                      00110         #endif
                      00111     #endif
                      00112 #endif
                      00113 
                      00114 DigitalInput macro
                      00115 #ifdef ANSELA
                      00116     #if RXPORT == PORTA         ; on PIC16F1824, TX/RX can be set to pins RA0/RA1
                      00117         banksel ANSELA 
                      00118         bcf     ANSELA, RXPIN   ; set RX pin to digital input
                      00119 
                      00120         BXtoB0
                      00121     #endif
                      00122 #endif
                      00123 #ifdef ANSELB
                      00124     #if RXPORT == PORTB         ; on PIC16F1828, TX/RX can be set to pins RX/RB5 and TX/RB7
                      00125         banksel ANSELB
                      00126         bcf     ANSELB, RXPIN   ; set RX pin to digital input
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00127 
                      00128         BXtoB0
                      00129     #endif
                      00130 #endif
                      00131     endm        
                      00132 
                      00133 #if BOOTLOADERSIZE < ERASE_FLASH_BLOCKSIZE
                      00134     ; This device has a large Erase FLASH Block Size, so we need to reserve a full Erase Block
                      00135     ; page for the bootloader. Reserving an entire erase block prevents the PC application
                      00136     ; from accidently erasing a portion of the bootloader.
                      00137     #define BOOTBLOCKSIZE ERASE_FLASH_BLOCKSIZE
                      00138     #ifndef BOOTLOADER_ADDRESS
                      00139         #ifdef CONFIG_AS_FLASH
                      00140             #define BOOTLOADER_ADDRESS  (END_FLASH - BOOTBLOCKSIZE - ERASE_FLASH_BLOCKSIZE)
                      00141         #else
                      00142             #define BOOTLOADER_ADDRESS  (END_FLASH - BOOTBLOCKSIZE)
                      00143         #endif
                      00144     #endif
                      00145 #else
                      00146     #if (BOOTLOADERSIZE % ERASE_FLASH_BLOCKSIZE) == 0
                      00147         #define BOOTBLOCKSIZE BOOTLOADERSIZE     
                      00148     #else
                      00149         #define BOOTBLOCKSIZE (BOOTLOADERSIZE / ERASE_FLASH_BLOCKSIZE + 1) * ERASE_FLASH_BLOCKSIZE
                      00150     #endif
                      00151     #ifndef BOOTLOADER_ADDRESS
                      00152         #define BOOTLOADER_ADDRESS  (END_FLASH - BOOTBLOCKSIZE)
                      00153     #endif
                      00154 #endif
                      00069 ; *****************************************************************************
                      00070 
                      00071 ; *****************************************************************************
                      00072 #define STX             0x0F
                      00073 #define ETX             0x04
                      00074 #define DLE             0x05
                      00075 #define NTX             0xFF
                      00076 #define RS485_ENABLE
                      00077 ; *****************************************************************************
                      00078 
                      00079 ; *****************************************************************************
  000000A0            00080 CRCL                equ 0xA0        ; GPR RAM in bank 1
  000000A1            00081 CRCH                equ 0xA1
  000000A2            00082 RXDATA              equ 0xA2
  000000A3            00083 TXDATA              equ 0xA3
                      00084 
                      00085 ; Framed Packet Format
                      00086 ; <STX>[<COMMAND><ADDRL><ADDRH><ADDRU><0x00><DATALEN><...DATA...>]<CRCL><CRCH><ETX>
                      00087 
                      00088               
  00000E60            00089 Delay1 equ 0xE60
  00000E61            00090 Delay2 equ 0xE61
                      00091               
  00000020            00092 STARTBUFFER         equ 0x20
  00000020            00093 COMMAND             equ STARTBUFFER     ; receive buffer in bank 0
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000021            00094 ADDRESS_L           equ STARTBUFFER+1
  00000022            00095 ADDRESS_H           equ STARTBUFFER+2
  00000023            00096 ADDRESS_U           equ STARTBUFFER+3
  00000024            00097 ADDRESS_X           equ STARTBUFFER+4
  00000025            00098 DATA_COUNTL         equ STARTBUFFER+5
  00000026            00099 PACKET_DATA         equ STARTBUFFER+6
  00000026            00100 DATA_COUNTH         equ PACKET_DATA     ; only for certain commands
                      00101 
                      00102 #if BOOTLOADER_ADDRESS == 0
                      00103 #ifndef BSR
                      00104 PCLATH_TEMP             equ     0x7E            ; Interrupt context save/restore temporary memory
                      00105 W_TEMP                  equ     0x7F
                      00106 #endif
                      00107 #endif
                      00108 ; *****************************************************************************
                      00109  
                      00110     errorlevel -302                 ; Do not show any banking warnings
                      00111 ; *****************************************************************************
                      00112     
                      00113 ;cblock 0x70                            ;shared memory location that is accessible from all banks       
                      00114 ;Delay1                                     ;Define two file registers for the delay loop in shared memo
                            ry
                      00115 ;Delay2                                    ; DELETE IT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      00116 ;endc
                      00117  
                      00118     
                      00119     
                      00120     
                      00121 #if BOOTLOADER_ADDRESS != 0
0000                  00122     ORG     0
                      00123    
                      00124     ; The following GOTO is not strictly necessary, but may startup faster
                      00125     ; if running at slow clock speeds.
                      00126         errorlevel -306             ; Do not show any page boundary warnings
                      00127         
                      00128     ;nop                                 
                      00129     ;movlw   high(BootloaderBreakCheck)
                      00130     ;movwf   PCLATH                  ; Bx
                      00131     ;goto    BootloaderBreakCheck
                      00132         errorlevel +306             ; Do not show any page boundary warnings
                      00133 
0E20                  00134     ORG     BOOTLOADER_ADDRESS
0E20                  00135 BootloaderStart:
                      00136     ;movlw   high(BootloaderBreakCheck)
                      00137     ;movwf   PCLATH                   ; Bx
                      00138     ;goto    BootloaderBreakCheck
0E20   308E           00139     movlw   high(BootloadMode)
0E21   008A           00140     movwf   PCLATH                  ; Bx
0E22   2E29           00141     goto    BootloadMode
                      00142 
                      00143 ; *****************************************************************************
                      00144 ; Determine if the application is supposed to be started or if we should
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00145 ; go into bootloader mode.
                      00146 ;
                      00147 ; If RXD is in BREAK state (vs IDLE) when we come out of MCLR reset, 
                      00148 ; immediately enter bootloader mode, even if there exists some application 
                      00149 ; firmware in program memory.
0E23                  00150 BootloaderBreakCheck:
                      00151      
                      00152     DigitalInput                    ; Make sure RX pin is not analog input
                          M #ifdef ANSELA
                          M     #if RXPORT == PORTA         ; on PIC16F1824, TX/RX can be set to pins RA0/RA1
                          M         banksel ANSELA 
                          M         bcf     ANSELA, RXPIN   ; set RX pin to digital input
                          M 
                          M         BXtoB0
                          M     #endif
                          M #endif
                          M #ifdef ANSELB
                          M     #if RXPORT == PORTB         ; on PIC16F1828, TX/RX can be set to pins RX/RB5 and TX/RB7
                          M         banksel ANSELB
                          M         bcf     ANSELB, RXPIN   ; set RX pin to digital input
                          M 
                          M         BXtoB0
                          M     #endif
                          M #endif
0E23   300E           00153     movlw   high(AppVector)
0E24   008A           00154     movwf   PCLATH                  ; Bx
                      00155     
                      00156 #ifdef INVERT_UART
                      00157     btfss   RXPORT, RXPIN           ; B0 
                      00158     goto    AppVector               ; no BREAK state, attempt to start application
                      00159 
                      00160     btfsc   RXPORT, RXPIN           ; B0 BREAK found, wait for RXD to go IDLE
                      00161     goto    $-1
                      00162 #else
0E25   1A8E           00163     btfsc   RXPORT, RXPIN           ; B0  
0E26   2E1B           00164     goto    AppVector               ; no BREAK state, attempt to start application
                      00165 
0E27   1E8E           00166     btfss   RXPORT, RXPIN           ; B0 BREAK found, wait for RXD to go IDLE
0E28   2E27           00167     goto    $-1
                      00168 #endif
                      00169 #else ; BOOTLOADER_ADDRESS == 0 ****************************************************************
                      00170     ORG     0
                      00171 BootloaderStart:
                      00172     nop                             ; required to allow debug executive startup when running under ICD
                      00173     BXtoB0                          ; Bx -> B0
                      00174     goto    BootloaderBreakCheck
                      00175 
                      00176     ORG     0x0004
                      00177 InterruptVector:
                      00178 #ifndef BSR
                      00179         movwf   W_TEMP                  ; Bx save W register temporarily
                      00180         swapf   PCLATH, W                               ; Bx save PCLATH register
                      00181         movwf   PCLATH_TEMP                             ; Bx (SWAPF used to avoid damaging STATUS regist
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            er)
                      00182 #endif
                      00183     movlw   high(AppIntVector)      ; Bx set PCLATH for making a long jump to the AppIntVector address
                      00184     movwf   PCLATH                  ; Bx
                      00185     goto    AppIntVector            ; Bx jump to remapped application interrupt vector.
                      00186 
                      00187 BootloaderBreakCheck:
                      00188     DigitalInput                    ; Make sure RX pin is not analog input
                      00189     
                      00190 #ifdef INVERT_UART
                      00191     btfsc   RXPORT, RXPIN           ; B0 
                      00192     goto    WaitForRxIdle           ; BREAK detected, startup in Bootloader mode
                      00193 #else
                      00194     btfss   RXPORT, RXPIN           ; B0  
                      00195     goto    WaitForRxIdle           ; BREAK detected, startup in Bootloader mode
                      00196 #endif
                      00197 
                      00198     ; Attempt to startup in Application mode.
                      00199     ; Read instruction at the application reset vector location. 
                      00200     ; If we read 0x3FFF, assume that the application firmware has
                      00201     ; not been programmed yet, so don't try going into application mode.
                      00202     banksel EEADR                   ; Bx -> B2
                      00203     movlw   low(AppVector)          ; Bx load address of application reset vector
                      00204     movwf   EEADR                   ; B2 
                      00205     movlw   high(AppVector)
                      00206     movwf   EEADRH                  ; B2
                      00207     movwf   PCLATH                  ; Bx
                      00208     call    ReadFlashWord           ; Bx -> B0
                      00209 
                      00210     addlw   .1
                      00211     btfss   STATUS, Z               ; Bx if the lower byte != 0xFF, 
                      00212     goto    AppVector               ; Bx run application.
                      00213 
                      00214     movlw   0x3F
                      00215     xorwf   FSR, w                  ; Bx if the lower byte == 0xFF but upper byte != 0x3F,
                      00216     btfss   STATUS, Z               ; Bx run application
                      00217     goto    AppVector
                      00218 
                      00219     movlw   high(BootloadMode)
                      00220     movwf   PCLATH                  ; Bx
                      00221 
                      00222     ; otherwise, assume application firmware is not loaded, 
                      00223     ; fall through to bootloader mode...
                      00224 #ifdef INVERT_UART
                      00225 WaitForRxIdle:
                      00226     btfsc   RXPORT, RXPIN           ; B0 BREAK found, wait for RXD to go IDLE
                      00227     goto    WaitForRxIdle
                      00228 #else
                      00229 WaitForRxIdle:
                      00230     btfss   RXPORT, RXPIN           ; B0 BREAK found, wait for RXD to go IDLE
                      00231     goto    WaitForRxIdle
                      00232 #endif
                      00233 #endif ; end BOOTLOADER_ADDRESS == 0 ******************************************
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00234 
0E29                  00235 BootloadMode:
                      00236     
0E29   27DA           00237     call Delay
0E2A   27DA           00238     call Delay 
                      00239     
0E2B   0021           00240     banksel        OSCCON              ;bank1                                       ; DELETE IT!!!!!!!!!
                            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!           
0E2C   30FB           00241     movlw          b'11111011'         ;16kHz, PLLenable, INT_clock
0E2D   0099           00242     movwf          OSCCON              ;move contents of the working register into OSCCON    
                      00243    
0E2E   3010           00244     movlw   b'00010000'
0E2F   008C           00245     movwf   TRISA
                      00246     
0E30   0022           00247     banksel        LATA                 ;bank2
0E31   128C           00248     bcf            LATA,5               ;turn on LED
0E32   150C           00249     bsf            LATA,2
Warning[207]: Found label after column 1. (B2toB1)
0E33                  00250     B2toB1
                      00251     
                      00252 
                      00253     
                      00254    
                      00255     
                      00256 #ifdef BRG16
0E33   0020           00257     banksel T1CON                   ; It is need to be there, because T1CON = bank 0, but it does not ma
                            tter, because BRG16 no define
0E34   3030           00258     movlw   b'00110000'             ; 1:8 prescaler - no division required later (but no rounding possib
                            le)
0E35   0098           00259     movwf   T1CON                   ; B0
                      00260 #endif
                      00261 
                      00262 #ifdef BSR
0E36   0023           00263     banksel RCSTA                   ; bank 3
0E37   3090           00264     movlw   b'10010000'             ; Setup UART
0E38   009D           00265     movwf   RCSTA                   ; B0
                      00266       
0E39   120E           00267     bcf     TXTRIS, TXPIN           ; B1 Setup TX pin for output
0E3A   3026           00268     movlw   b'00100110'             ; BRGH = 1, TXEN = 1
0E3B   009E           00269     movwf   TXSTA                   ; B1
0E3C   0021           00270     banksel OPTION_REG              ; bank 1
                      00271     
                      00272     
0E3D   3010           00273     movlw   b'00010000'                                                    ; DELETE IT!!!!!!!!!!!!!!!!!!
                            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
0E3E   008C           00274     movwf   TRISA
0E3F   3028           00275     movlw   b'00101000'
0E40   008E           00276     movwf   TRISC    
                      00277    
                      00278 #else
                      00279     banksel RCSTA                   ; bank 3
                      00280     movlw   b'10010000'             ; Setup UART
                      00281     movwf   RCSTA                   ; B0
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00282 
                      00283     B0toB1                          ; B0 -> B1
                      00284     bcf     TXTRIS, TXPIN           ; B1 Setup TX pin for output
                      00285     movlw   b'00100110'             ; BRGH = 1, TXEN = 1
                      00286     movwf   TXSTA                   ; B1
                      00287 #endif
                      00288 
                      00289     
                      00290 ;goto LEDBLINK    
                      00291 ;call Delay
                      00292 ;call Delay 
                      00293 ;nop
                      00294  
                      00295     
                      00296     
                      00297 #ifndef BRG16                       ;yes BRG16 no define
                      00298     
                      00299     ;banksel OPTION_REG             ; bank 1, do not need, because we already in bank 1
                      00300     clrwdt                          ; required to avoid reset when modifying TMR0 prescaler assignment
                      00301     movlw   b'00000011'             ; 1:16 prescaler for Timer 0, used for auto-baud calculation
                      00302     movwf   OPTION_REG              ; B1
                      00303          
                      00304 #endif
                      00305 
                      00306     
                      00307   
                      00308  
                      00309     
                      00310     B1toB3                          ; B1 -> B3
0E41   0023               M     movlb   .3                      ; Bx -> B3
                      00311     
                      00312    ;movlb   .3 
                      00313    ;goto 0x180   
                      00314    
                      00315  
                      00316     
                      00317     
                      00318 #ifdef INVERT_UART
                      00319     bsf     BAUDCTL, RXDTP          ; B3
                      00320     bsf     BAUDCTL, TXCKP          ; B3
                      00321 #endif
                      00322 #ifdef BRG16
                      00323     
                      00324  
0E42   159F           00325     bsf     BAUDCTL, BRG16          ; B3
                      00326             
                      00327 #endif
                      00328 
                      00329 #ifdef USE_ALTERNATE_PINS
                      00330         banksel APFCON0
                      00331         bsf     APFCON0, TXCKSEL        ; set TX pin to alternate pin
                      00332         bsf     APFCON0, RXDTSEL        ; set RX pin to alternate pin
                      00333 #endif
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00334 
                      00335    
                      00336         
                      00337         
                      00338 #if BOOTLOADER_ADDRESS != 0     
                      00339     DigitalInput
                          M #ifdef ANSELA
                          M     #if RXPORT == PORTA         ; on PIC16F1824, TX/RX can be set to pins RA0/RA1
                          M         banksel ANSELA 
                          M         bcf     ANSELA, RXPIN   ; set RX pin to digital input
                          M 
                          M         BXtoB0
                          M     #endif
                          M #endif
                          M #ifdef ANSELB
                          M     #if RXPORT == PORTB         ; on PIC16F1828, TX/RX can be set to pins RX/RB5 and TX/RB7
                          M         banksel ANSELB
                          M         bcf     ANSELB, RXPIN   ; set RX pin to digital input
                          M 
                          M         BXtoB0
                          M     #endif
                          M #endif
                      00340 #endif
                      00341 
                      00342     
                      00343     
                      00344     
                      00345 #ifdef USE_MAX_INTOSC
                      00346     banksel OSCCON                  ; Bx -> B1
                      00347     
                      00348     #ifdef USE_PLL    
                      00349         
                      00350     movlw   b'11110000'             ; switch to 8MHz internal oscillator with PLL (32MHz)
                      00351     movwf   OSCCON
                      00352     #else
                      00353     movlw   b'01111000'             ; switch to 16MHz internal oscillator without PLL
                      00354     movwf   OSCCON
                      00355     #endif
                      00356 #endif
                      00357 
                      00358 ; *****************************************************************************
                      00359 
                      00360    
                      00361     
                      00362 ; *****************************************************************************
0E43                  00363 DoAutoBaud:
                      00364     
                      00365 
                      00366     
                      00367     
                      00368     
                      00369     
                      00370     
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00371     
                      00372 ; ___    __________            ________
                      00373 ;    \__/          \__________/
                      00374 ;       |                     |
                      00375 ;       |-------- p ----------|
                      00376 ;
                      00377 ;   p = The number of instructions between the first and last
                      00378 ;           rising edge of the RS232 control sequence 0x0F. Other 
                      00379 ;       possible control sequences are 0x01, 0x03, 0x07, 0x1F, 
                      00380 ;       0x3F, 0x7F.
                      00381 ;
                      00382 ;   SPBRG = (p / 32) - 1    BRGH = 1, BRG16 = 0
                      00383 ;   SPBRG = (p / 8) - 1     BRGH = 1, BRG16 = 1
                      00384 
                      00385 #ifdef BSR
0E43   0023           00386     banksel RCSTA                   ;bank 3
                      00387 #else
                      00388     BXtoB0                          ; Bx -> B0
                      00389 #endif
0E44   121D           00390     bcf     RCSTA, CREN             ; B0 Stop UART RX, we're going to do autobaud pulse width timing ins
                            tead
0E45   0819           00391     movf    RCREG, W                ; B0 Empty the UART receive buffer
0E46   0819           00392     movf    RCREG, W                ; B0
                      00393 #ifdef BSR
0E47   0020           00394     banksel TMR1H                   ;bank 0
                      00395 #endif
0E48                  00396 RetryAutoBaud:
                      00397 #ifdef BRG16
0E48   0197           00398     clrf    TMR1H                   ; B0 reset timer count value
0E49   0196           00399     clrf    TMR1L                   ; B0
0E4A   1011           00400     bcf     PIR1, TMR1IF            ; B0
                      00401 #else
                      00402     bcf     STATUS, C               ; Bx do not rotate in anything but 0
                      00403 #endif
                      00404     
                      00405    
0E4B   26B0           00406      call    WaitForRise             ; B0 wait for a start bit to pass by
                      00407 
                      00408     
                      00409 #ifdef BRG16
0E4C   1418           00410     bsf     T1CON, TMR1ON           ; B0 start timer counting for entire D7..D0 data bit period.
                      00411 #else
                      00412     clrf    TMR0                    ; B0 restart counting
                      00413 #endif
0E4D   26B0           00414     call    WaitForRise             ; B0 wait for stop bit
                      00415 #ifdef BRG16
0E4E   1018           00416     bcf     T1CON, TMR1ON           ; B0 stop the timer from counting further. 
0E4F   1811           00417     btfsc   PIR1, TMR1IF            ; B0 if TMR1 overflowed, we did not get a good baud capture
0E50   2E48           00418     goto    RetryAutoBaud           ; try again
                      00419 
                      00420     ; save new baud rate generator value
0E51   0816           00421     movf    TMR1L, w                ; B0 warning: must read TMR0L before TMR0H holds real data
                      00422   #ifdef BSR
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0E52   0023           00423     banksel SPBRG
                      00424   #else
                      00425     B0toB1                          ; B0 -> B1
                      00426   #endif
0E53   009B           00427     movwf   SPBRG                   ; B1
                      00428   #ifdef BSR
0E54   0020           00429     banksel TMR1H
                      00430   #else
                      00431     B1toB0                          ; B1 -> B0
                      00432   #endif
0E55   0817           00433     movf    TMR1H, w                ; B0
                      00434   #ifdef BSR
0E56   0023           00435     banksel SPBRGH
                      00436   #else
                      00437     B0toB1                          ; B0 -> B1
                      00438   #endif
0E57   009C           00439     movwf   SPBRGH                  ; B1
                      00440    
                      00441  ;goto LEDBLINK                     yes we was here   
                      00442    
                      00443     
                      00444 #else  ; not BRG16
                      00445     movf    TMR0, w
                      00446     movwf   FSR
                      00447     rrf     FSR, w                  ; Bx divide timer value by 2 and save in WREG
                      00448     nop
                      00449     nop
                      00450     btfss   STATUS, C               ; Bx do we need to round down?
                      00451     addlw   0xFF                    ; yes, round down
                      00452 
                      00453   #ifdef BSR
                      00454     banksel SPBRG                   ;bank 3
                      00455   #else
                      00456     B0toB1                          ; B0 -> B1
                      00457   #endif
                      00458     movwf   SPBRG                   ; B1 set new baud rate
                      00459   
                      00460 #endif ; BRG16
                      00461 
                      00462     
                      00463     
                      00464     
                      00465     
                      00466     
0E58                  00467 WaitForHostCommand:                 ; B0/B1
                      00468     
                      00469  
                      00470      
                      00471     
                      00472 #ifdef BSR
0E58   0023           00473     banksel RCSTA                   ;bank 3
                      00474 #else
                      00475     BXtoB0                          ; B1 -> B0
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00476 #endif
0E59   161D           00477     bsf     RCSTA, CREN             ; B0 start receiving    
                      00478     lfsr    COMMAND                 ; Bx Point to the buffer
0E5A   3020               M     movlw   low(COMMAND)
0E5B   0084               M     movwf   FSR0L
0E5C   3000               M     movlw   high(COMMAND)
0E5D   0085               M     movwf   FSR0H
0E5E   27C5           00479     call    ReadHostByte            ; B0 get start of transmission <STX>
0E5F   3A0F           00480     xorlw   STX
                      00481     
                      00482     ;bz LEDBLINK
                      00483     
0E60   1D03 2E43      00484     bnz     DoAutoBaud              ; Bx got something unexpected, perform autobaud
                      00485 ; *****************************************************************************
                      00486 
                      00487 ; *****************************************************************************
                      00488 ; Read and parse packet data.
0E62                  00489 StartOfLine:
0E62   300F           00490     movlw   STX                     ; send back start of response
0E63   27AF           00491     call    SendHostByte            ; B0/B1 -> B1
                      00492 ;goto LEDBLINK                      ; STX handshake is OK
                      00493     
                      00494 ;nop 
                      00495     
0E64                  00496 ReceiveDataLoop:
                      00497     ;goto LEDBLINK
0E64   27C5           00498     call    ReadHostByte            ; Bx -> B0 Get the data
0E65   3A0F           00499     xorlw   STX                     ; Check for an unexpected STX
                      00500     ;call    SendHostByte
                      00501     ;goto ReceiveDataLoop
                      00502     ;bz LEDBLINK
0E66   1903 2E62      00503     bz      StartOfLine             ; unexpected STX: abort packet and start over.
                      00504 
0E68                  00505 NoSTX:
                      00506    ; goto LEDBLINK
0E68   0800           00507     movf    INDF, W                 ; Bx
0E69   3A04           00508     xorlw   ETX                     ; Check for a ETX
0E6A   1903 2E75      00509     bz      VerifyPacketCRC         ; Yes, verify CRC
                      00510 
0E6C                  00511 NoETX:
0E6C   0800           00512     movf    INDF, W                 ; Bx
0E6D   3A05           00513     xorlw   DLE                     ; Check for a DLE
0E6E   1D03 2E71      00514     bnz     AppendDataBuffer
                      00515 
0E70   27C5           00516     call    ReadHostByte            ; Bx -> B0 DLE received, get the next byte and store it
                      00517     
0E71                  00518 AppendDataBuffer:
0E71   0A84           00519     incf    FSR, f                  ; Bx move to next empty location
0E72   1F84           00520     btfss   FSR, 7                  ; Bx have we overflowed the GPR receive buffer?
0E73   2E64           00521     goto    ReceiveDataLoop         ; nope, continue receiving data
0E74   2E43           00522     goto    DoAutoBaud              ; overflow, baud rate most likely bad, re-attempt autobaud.
                      00523     
0E75                  00524 VerifyPacketCRC:
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00525     B0toB1                          ; B0 -> B1
0E75   0021               M     movlb   .1                      ; Bx -> B1
0E76   0304           00526     decf    FSR, w                  ; Bx
0E77   00A3           00527     movwf   TXDATA                  ; B1 save end of packet pointer
0E78   03A3           00528     decf    TXDATA, f               ; Bx
                      00529 
                      00530     lfsr    COMMAND                 ; Bx reset pointer to beginning of data
0E79   3020               M     movlw   low(COMMAND)
0E7A   0084               M     movwf   FSR0L
0E7B   3000               M     movlw   high(COMMAND)
0E7C   0085               M     movwf   FSR0H
0E7D   01A0           00531     clrf    CRCL                    ; B1 reset CRC accumulator
0E7E   01A1           00532     clrf    CRCH                    ; B1
                      00533 
0E7F                  00534 VerifyPacketCrcLoop:
0E7F   0800           00535     movf    INDF, w                 ; Bx
0E80   26B9           00536     call    AddCrcB1                ; B1 add new data to the CRC
                      00537 
0E81   0A84           00538     incf    FSR, f                  ; Bx
0E82   0804           00539     movf    FSR, w                  ; Bx
0E83   0223           00540     subwf   TXDATA, w               ; B1
0E84   1D03 2E7F      00541     bnz     VerifyPacketCrcLoop     ; we aren't at the end of the received data yet, loop
                      00542 
0E86   0820           00543     movf    CRCL, w                 ; B1
0E87   0200           00544     subwf   INDF, w                 ; Bx
0E88   1D03 2E43      00545     bnz     DoAutoBaud              ; invalid CRC, reset baud rate generator to re-sync with host
                      00546 
0E8A   0A84           00547     incf    FSR, f                  ; Bx
0E8B   0821           00548     movf    CRCH, w                 ; B1
0E8C   0200           00549     subwf   INDF, w                 ; Bx
0E8D   1D03 2E43      00550     bnz     DoAutoBaud              ; Bx invalid CRC, reset baud rate generator to re-sync with host
                      00551 
                      00552 ; ***********************************************
                      00553 ; Pre-setup, common to all commands.
0E8F   01A0           00554     clrf    CRCL                    ; B1
0E90   01A1           00555     clrf    CRCH                    ; B1
                      00556 
                      00557     BXtoB0                          ; B1 -> B0
0E91   0020               M     movlb   .0                      ; Bx -> B0
0E92   0822           00558     movf    ADDRESS_H, W            ; B0 read address pointer from packet data
0E93   0084           00559     movwf   FSR                     ; Bx temporarily save high address byte to FSR
0E94   0821           00560     movf    ADDRESS_L, W            ; B0
0E95   0023           00561     banksel EEADR                   ; Bx -> B2
0E96   0091           00562     movwf   EEADR                   ; B2
0E97   0804           00563     movf    FSR, w                  ; Bx read back high address byte from temporary register
0E98   0092           00564     movwf   EEADRH                  ; B2
                      00565 
                      00566     lfsr    PACKET_DATA             ; Bx
0E99   3026               M     movlw   low(PACKET_DATA)
0E9A   0084               M     movwf   FSR0L
0E9B   3000               M     movlw   high(PACKET_DATA)
0E9C   0085               M     movwf   FSR0H
                      00567     BXtoB0                          ; Bx -> B0
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0E9D   0020               M     movlb   .0                      ; Bx -> B0
                      00568 
                      00569 ; ***********************************************
                      00570 
                      00571  
                      00572 
                      00573 ; ***********************************************
                      00574 ; Test the command field and sub-command.
0E9E                  00575 CheckCommand:
                      00576     
                      00577    
                      00578     
                      00579     
0E9E   300A           00580     movlw   (JUMPTABLE_END - JUMPTABLE_BEGIN)
0E9F   0220           00581     subwf   COMMAND, w              ; B0 test for valid command number
0EA0   1803 2E43      00582     bc      DoAutoBaud              ; Bx invalid command - reset baud generator and re-sync with host
                      00583 
0EA2   0820           00584     movf    COMMAND, W              ; B0
                      00585     ; This jump table must exist entirely within one 256 byte block of program memory.
                      00586 #if ($ & 0xFF) > (0xFF - .10)
                      00587     ; Too close to the end of a 256 byte boundary, push address forward to get code
                      00588     ; into the next 256 byte block.
                      00589     messg   "Wasting some code space to ensure jump table is aligned."
                      00590     ORG     $+(0x100 - ($ & 0xFF))
                      00591 #endif
0EA3   0782           00592     addwf   PCL, F                  ; 0 Bx Jump in command jump table based on COMMAND from host
0EA4                  00593 JUMPTABLE_BEGIN:
                      00594     
                      00595     
                      00596     
0EA4   2ED6           00597     goto    BootloaderInfo          ; 1 B0 0
0EA5   2EDE           00598     goto    ReadFlash               ; 2 Bx 1
0EA6   2EFD           00599     goto    VerifyFlash             ; 3 Bx 2
0EA7   2F16           00600     goto    EraseFlash              ; 4 Bx 3
0EA8   2F3D           00601     goto    WriteFlash              ; 5 Bx 4
0EA9   2F72           00602     goto    ReadEeprom              ; 6 B0 5
0EAA   2F83           00603     goto    WriteEeprom             ; 7 Bx 6
0EAB   2F93           00604     goto    SendAcknowledge         ; 8 B0 7 - WriteConfig not supported on PIC16F devices
0EAC   0000           00605     nop                             ; 9 B0 8
0EAD   300E           00606     movlw   high(AppVector)         ; 10 B0 9
0EAE                  00607 JUMPTABLE_END:
0EAE   008A           00608     movwf   PCLATH                  ; Bx
0EAF   2E1B           00609     goto    AppVector               ; B0
                      00610 #if (JUMPTABLE_BEGIN & 0xFF) > (JUMPTABLE_END & 0xFF)
                      00611    
                      00612     error "Jump table is not aligned to fit within a single 256 byte address range."
                      00613 #endif
                      00614 
0EB0                  00615 WaitForRise:                        ; B0
                      00616    
0EB0   0064           00617     clrwdt
                      00618 
0EB1                  00619 WaitForRiseLoop:                    ; B0
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00620  
                      00621 #ifdef BRG16
0EB1   1811           00622     btfsc   PIR1, TMR1IF            ; B0 if TMR1 overflowed, we did not get a good baud capture
0EB2   0008           00623     return                          ; abort
                      00624 #endif
                      00625 
0EB3   1A8E           00626     btfsc   RXPORT, RXPIN           ; B0 Wait for a falling edge
0EB4   2EB1           00627     goto    WaitForRiseLoop         ; B0
                      00628    
0EB5                  00629 WtSR:
                      00630    
0EB5   1E8E           00631     btfss   RXPORT, RXPIN           ; B0 Wait for rising edge
0EB6   2EB5           00632     goto    WtSR                    ; B0
0EB7   0008           00633     return
                      00634 
                      00635 ; 16-bit CCIT CRC
                      00636 ; Adds WREG byte to the CRC checksum CRCH:CRCL. WREG destroyed on return.
0EB8                  00637 AddCrc:                             ; B0/B1 Init: CRCH = HHHH hhhh, CRCL = LLLL llll
                      00638     
                      00639     B0toB1                          ; B0 -> B1
0EB8   0021               M     movlb   .1                      ; Bx -> B1
0EB9                  00640 AddCrcB1:
                      00641      
0EB9   0621           00642     xorwf   CRCH, w                 ; B1 Pre:  HHHH hhhh     WREG =      IIII iiii
0EBA   00A2           00643     movwf   RXDATA                  ; B1
0EBB   0820           00644     movf    CRCL, w                 ; B1 Pre:  LLLL llll     CRCH =      LLLL llll
0EBC   00A1           00645     movwf   CRCH                    ; B1
0EBD   0822           00646     movf    RXDATA, w               ; B1
0EBE   00A0           00647     movwf   CRCL                    ; B1 Pre:  IIII iiii     CRCL =      IIII iiii
0EBF   0E20           00648     swapf   CRCL, w                 ; B1 Pre:  IIII iiii     WREG =      iiii IIII
0EC0   390F           00649     andlw   0x0F                    ; Pre:  iiii IIII     WREG =      0000 IIII
0EC1   06A0           00650     xorwf   CRCL, f                 ; B1 Pre:  IIII iiii     CRCL =      IIII jjjj
0EC2   0E20           00651     swapf   CRCL, w                 ; B1 Pre:  IIII jjjj     WREG =      jjjj IIII
0EC3   39F0           00652     andlw   0xF0                    ; Pre:  jjjj IIII     WREG =      jjjj 0000
0EC4   06A1           00653     xorwf   CRCH, f                 ; B1 Pre:  LLLL llll     CRCH =      MMMM llll
0EC5   0EA0           00654     swapf   CRCL, f                 ; B1 Pre:  IIII jjjj     WREG =      jjjj IIII
0EC6   1003           00655     bcf     STATUS, C               ; Bx
0EC7   0D20           00656     rlf     CRCL, w                 ; B1 Pre:  jjjj IIII     WREG =      jjjI IIIj
0EC8   1803           00657     btfsc   STATUS, C               ; Bx
0EC9   3E01           00658     addlw   .1
0ECA   06A1           00659     xorwf   CRCH, f                 ; B1 Pre:  MMMM llll     CRCH =      XXXN mmmm
0ECB   39E0           00660     andlw   b'11100000'             ; Pre:  jjjI IIIj     WREG =      jjj0 0000
0ECC   06A1           00661     xorwf   CRCH, f                 ; B1 Pre:  jjj0 0000     CRCH =      MMMN mmmm
0ECD   0EA0           00662     swapf   CRCL, f                 ; B1 Pre:  IIII jjjj     WREG =      jjjj IIII
0ECE   06A0           00663     xorwf   CRCL, f                 ; B1 Pre:  MMMN mmmm     CRCL =      JJJI jjjj
0ECF   0008           00664     return
                      00665 
                      00666 ; ***********************************************
                      00667 ; Commands
                      00668 ; ***********************************************
                      00669  
                      00670 ; Provides information about the Bootloader to the host PC software.
0ED0                  00671 BootInfoBlock:
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00672     
0ED0   01E0           00673     db      high(BOOTBLOCKSIZE), low(BOOTBLOCKSIZE)
0ED1   0501           00674     db      MINOR_VERSION, MAJOR_VERSION
                      00675 #ifdef FREE
0ED2   0201           00676     db      0x02, 0x01              ; family id : command mask (erase flash command enabled)
                      00677 #else
                      00678     db      0x02, 0x00              ; family id : command mask (no erase flash command)
                      00679 #endif
Message[303]: Program word too large.  Truncated to core size. (8E20)
0ED3   0E20           00680     db      high(BootloaderStart), low(BootloaderStart)
0ED4   0000           00681     db      0, upper(BootloaderStart)
0ED5   013A           00682     db      high(DEVICEID), low(DEVICEID)
0ED6                  00683 BootInfoBlockEnd:
                      00684 
                      00685 ; In:   <STX>[<0x00>]<CRCL><CRCH><ETX>
                      00686 ; Out:  <STX><BOOTBYTESL><BOOTBYTESH><VERL><VERH><STARTBOOTL><STARTBOOTH><STARTBOOTU><0x00><CRCL><CRCH><
                            ETX>
0ED6                  00687 BootloaderInfo:                     ; B0
                      00688    
0ED6   3006           00689     movlw   (BootInfoBlockEnd - BootInfoBlock)
0ED7   00A5           00690     movwf   DATA_COUNTL             ; B0
0ED8   01A6           00691     clrf    DATA_COUNTH             ; B0
                      00692 
0ED9   0023           00693     banksel EEADR
0EDA   30D0           00694     movlw   low(BootInfoBlock)
0EDB   0091           00695     movwf   EEADR                   ; B2/B3(PIC16F193x)
0EDC   308E           00696     movlw   high(BootInfoBlock)     ; B2/B3(PIC16F193x)
0EDD   0092           00697     movwf   EEADRH                  ; B2/B3(PIC16F193x)
                      00698 
                      00699     ;; fall through to ReadFlash code -- send Bootloader Information Block from FLASH.
                      00700 
                      00701 ; In:   <STX>[<0x01><ADDRL><ADDRH><ADDRU><0x00><BYTESL><BYTESH>]<CRCL><CRCH><ETX>
                      00702 ; Out:  <STX>[<DATA>...]<CRCL><CRCH><ETX>
0EDE                  00703 ReadFlash:                          ; Bx -> B0
                      00704     
                      00705                                     
                      00706     
0EDE   26F2           00707     call    ReadFlashWord           ; Bx -> B0
0EDF   279F           00708     call    SendEscapeByte          ; Bx -> B1
0EE0   26B9           00709     call    AddCrcB1                ; B1
0EE1   0804           00710     movf    FSR, w                  ; Bx read most significant bits from tempory memory
0EE2   279F           00711     call    SendEscapeByte          ; Bx -> B1
0EE3   26B9           00712     call    AddCrcB1                ; B1
                      00713     
                      00714                                     
                      00715     
0EE4   0023           00716     banksel EEADR                   ; Bx -> B2
0EE5   0A91           00717     incf    EEADR, f                ; B2
0EE6   1903           00718     btfsc   STATUS, Z               ; Bx
0EE7   0A92           00719     incf    EEADRH,F                ; B2
                      00720     
                      00721     BXtoB0                          ; Bx -> B0
0EE8   0020               M     movlb   .0                      ; Bx -> B0
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0EE9   3001           00722     movlw   1
0EEA   02A5           00723     subwf   DATA_COUNTL, f          ; B0
0EEB   1C03           00724     btfss   STATUS, C
0EEC   03A6           00725     decf    DATA_COUNTH, f          ; B0
                      00726 
0EED   0826           00727     movf    DATA_COUNTH, w          ; B0 is DATA_COUNTH:DATA_COUNTL == 0?
0EEE   0425           00728     iorwf   DATA_COUNTL, w          ; B0 
0EEF   1D03 2EDE      00729     bnz     ReadFlash               ; Bx non-zero, keep reading more data
0EF1   2F96           00730     goto    SendChecksum            ; Bx zero, exit read loop and send end of packet
                      00731 
0EF2                  00732 ReadFlashWord:                      ; Bx -> B0
0EF2   0023           00733     banksel EECON1                  ; Bx -> B3
0EF3   1795           00734     bsf     EECON1, EEPGD           ; B3 access program memory instead of eeprom data memory
0EF4   1415           00735     bsf     EECON1, RD              ; B3 initiate read operation
0EF5   0000           00736     nop                             ; B3 sounds like this instruction slot might be usable, but NOP is s
                            afest
0EF6   0000           00737     nop                             ; B3 required NOP during program memory read operation
0EF7   0023           00738     banksel EEDATA                  ; Bx -> B2
0EF8   0814           00739     movf    EEDATH, w               ; B2 read most significant bits of program memory
0EF9   0084           00740     movwf   FSR                     ; Bx save it temporarily
0EFA   0813           00741     movf    EEDATA, w               ; B2 read least significant byte of program memory
                      00742     BXtoB0                          ; Bx -> B0
0EFB   0020               M     movlb   .0                      ; Bx -> B0
0EFC   0008           00743     return
                      00744 
                      00745 ; In:   <STX>[<0x02><ADDRL><ADDRH><ADDRU><0x00><BLOCKSL><BLOCKSH>]<CRCL><CRCH><ETX>
                      00746 ; Out:  <STX>[<CRCL1><CRCH1>...<CRCLn><CRCHn>]<ETX>
0EFD                  00747 VerifyFlash:                        ; Bx
0EFD   26F2           00748     call    ReadFlashWord           ; Bx -> B0
0EFE   26B8           00749     call    AddCrc                  ; B1/B0 -> B1
0EFF   0804           00750     movf    FSR, w                  ; Bx read most significant bits from tempory memory
0F00   26B9           00751     call    AddCrcB1                ; B1
                      00752 
0F01   0023           00753     banksel EEADR                   ; Bx -> B2
0F02   0A91           00754     incf    EEADR, f                ; B2
0F03   1903           00755     btfsc   STATUS, Z               ; Bx
0F04   0A92           00756     incf    EEADRH,F                ; B2
                      00757 
0F05   0811           00758     movf    EEADR, w                ; B2
0F06   391F           00759     andlw   (ERASE_FLASH_BLOCKSIZE-1)
0F07   1D03 2EFD      00760     bnz     VerifyFlash             ; Bx
                      00761 
0F09   279B           00762     call    SendCRCWord             ; Bx -> B1
                      00763 
                      00764     BXtoB0                          ; Bx -> B0
0F0A   0020               M     movlb   .0                      ; Bx -> B0
0F0B   3001           00765     movlw   1
0F0C   02A5           00766     subwf   DATA_COUNTL, f          ; B0
0F0D   1C03           00767     btfss   STATUS, C               ; Bx
0F0E   03A6           00768     decf    DATA_COUNTH, f          ; B0
                      00769 
0F0F   0826           00770     movf    DATA_COUNTH, w          ; B0 is DATA_COUNTH:DATA_COUNTL == 0?
0F10   0425           00771     iorwf   DATA_COUNTL, w          ; B0
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0F11   1D03 2EFD      00772     bnz     VerifyFlash             ; Bx non-zero, keep reading more data
0F13   2F97           00773     goto    SendETX                 ; Bx zero, exit read loop and send end of packet
                      00774 
                      00775 ; In:   <STX>[<0x03><ADDRL><ADDRH><ADDRU><0x00><PAGESL>]<CRCL><CRCH><ETX>
                      00776 ; Out:  <STX>[<0x03>]<CRCL><CRCH><ETX>
                      00777 #ifdef FREE
                      00778 #ifdef USE_SOFTBOOTWP
0F14   2E20           00779     goto    BootloaderStart         ; this code -should- never be executed, but in case of errant 
0F15   2E20           00780     goto    BootloaderStart         ; execution or firmware bugs, may protect against accidental erases.
                      00781 #endif
0F16                  00782 EraseFlash:                         ; Bx
                      00783 #ifdef USE_SOFTBOOTWP
                      00784   #define ERASE_ADDRESS_MASK  ( (~(ERASE_FLASH_BLOCKSIZE-1)) & (END_FLASH-1) )
                      00785 
0F16   0023           00786     banksel EEADR                   ; Bx -> B2
                      00787   #if high(ERASE_ADDRESS_MASK) != 0xFF
0F17   300F           00788     movlw   high(ERASE_ADDRESS_MASK)    ; force starting address to land on a FLASH Erase Block boundary
0F18   0592           00789     andwf   EEADRH, f
                      00790   #endif
                      00791   #if low(ERASE_ADDRESS_MASK) != 0xFF
0F19   30E0           00792     movlw   low(ERASE_ADDRESS_MASK)     ; force starting address to land on a FLASH Erase Block boundary
0F1A   0591           00793     andwf   EEADR, f
                      00794   #endif
                      00795 
                      00796   #if BOOTLOADER_ADDRESS != 0
                      00797     ; is the address to erase less than the bootloader address?
0F1B   300E           00798     movlw   high(BOOTLOADER_ADDRESS)
0F1C   0212           00799     subwf   EEADRH, w
0F1D   3020           00800     movlw   low(BOOTLOADER_ADDRESS)
0F1E   1903           00801     btfsc   STATUS, Z
0F1F   0211           00802     subwf   EEADR, w
0F20   1C03           00803     btfss   STATUS, C
0F21   2F2E           00804     goto    EraseAddressOkay    ; erasing memory before the boot block is okay
                      00805   #endif
                      00806 
                      00807     ; is the address to erase greater than or equal to the end of the boot block?
0F22   3010           00808     movlw   high(BOOTLOADER_ADDRESS + BOOTBLOCKSIZE)
0F23   0212           00809     subwf   EEADRH, w
0F24   3000           00810     movlw   low(BOOTLOADER_ADDRESS + BOOTBLOCKSIZE)
0F25   1903           00811     btfsc   STATUS, Z
0F26   0211           00812     subwf   EEADR, w
0F27   1803           00813     btfsc   STATUS, C
0F28   2F2E           00814     goto    EraseAddressOkay    ; erasing memory after the boot block is okay
                      00815 
0F29   0023           00816     banksel EECON1              ; Bx -> B3
0F2A   0195           00817     clrf    EECON1              ; inhibit writes for this block
0F2B   2F32           00818     goto    NextEraseBlock      ; move on to next erase block
                      00819 
0F2C   2E20           00820     goto    BootloaderStart     ; this code -should- never be executed, but in case of errant 
0F2D   2E20           00821     goto    BootloaderStart     ; execution or firmware bugs, may protect against accidental writes.
                      00822 #endif
0F2E                  00823 EraseAddressOkay:
0F2E   0023           00824     banksel EECON1                  ; Bx -> B3
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0F2F   3094           00825     movlw   b'10010100'             ; Bx setup FLASH erase
0F30   0095           00826     movwf   EECON1                  ; B3
0F31   27D1           00827     call    StartWriteB3            ; B3 erase the page
                      00828 
0F32                  00829 NextEraseBlock:
                      00830     ; Decrement address by erase block size
0F32   0023           00831     banksel EEADR                   ; Bx -> B2
                      00832 #if ERASE_FLASH_BLOCKSIZE >= .256
                      00833     movlw   high(ERASE_FLASH_BLOCKSIZE)
                      00834     subwf   EEADRH, F               ; B2
                      00835 #else
0F33   3020           00836     movlw   ERASE_FLASH_BLOCKSIZE
0F34   0291           00837     subwf   EEADR, F                ; B2
0F35   1C03           00838     btfss   STATUS, C
0F36   0392           00839     decf    EEADRH, f               ; B2
                      00840 #endif
                      00841 
0F37   0020           00842     banksel DATA_COUNTL             ; Bx -> B1
0F38   0BA5           00843     decfsz  DATA_COUNTL, F          ; B1
0F39   2F16           00844     goto    EraseFlash    
0F3A   2F93           00845     goto    SendAcknowledge         ; All done, send acknowledgement packet
                      00846 #endif
                      00847 
                      00848 #ifdef USE_SOFTBOOTWP
0F3B   2E20           00849     goto    BootloaderStart         ; this code -should- never be executed, but in case of errant 
0F3C   2E20           00850     goto    BootloaderStart         ; execution or firmware bugs, may protect against accidental writes.
                      00851 #endif
                      00852 
                      00853 ; In:   <STX>[<0x04><ADDRL><ADDRH><ADDRU><0x00><BLOCKSL><DATA>...]<CRCL><CRCH><ETX>
                      00854 ; Out:  <STX>[<0x04>]<CRCL><CRCH><ETX>
0F3D                  00855 WriteFlash:                         ; Bx
                      00856     
                      00857     
                      00858 
                      00859    
                      00860  
                      00861     
                      00862 #ifdef USE_SOFTBOOTWP
                      00863   #define WRITE_ADDRESS_MASK  ( (~(WRITE_FLASH_BLOCKSIZE-1)) & (END_FLASH-1) )
                      00864 
0F3D   0023           00865     banksel EEADR                   ; Bx -> B2
                      00866   #if high(WRITE_ADDRESS_MASK) != 0xFF
0F3E   300F           00867     movlw   high(WRITE_ADDRESS_MASK)    ; force starting address to land on a FLASH Write Block boundary
0F3F   0592           00868     andwf   EEADRH, f
                      00869   #endif
                      00870   #if low(WRITE_ADDRESS_MASK) != 0xFF
0F40   30E0           00871     movlw   low(WRITE_ADDRESS_MASK)     ; force starting address to land on a FLASH Write Block boundary
0F41   0591           00872     andwf   EEADR, f
                      00873   #endif
                      00874 
                      00875   #if BOOTLOADER_ADDRESS != 0
                      00876     ; is the address to write less than the bootloader address?
0F42   300E           00877     movlw   high(BOOTLOADER_ADDRESS)
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0F43   0212           00878     subwf   EEADRH, w
0F44   3020           00879     movlw   low(BOOTLOADER_ADDRESS)
0F45   1903           00880     btfsc   STATUS, Z
0F46   0211           00881     subwf   EEADR, w
0F47   1C03           00882     btfss   STATUS, C
0F48   2F55           00883     goto    WriteAddressOkay    ; writing before the boot block is okay
                      00884   #endif
                      00885 
                      00886     ; is the address to write greater than or equal to the end of the boot block?
0F49   3010           00887     movlw   high(BOOTLOADER_ADDRESS + BOOTBLOCKSIZE)
0F4A   0212           00888     subwf   EEADRH, w
0F4B   3000           00889     movlw   low(BOOTLOADER_ADDRESS + BOOTBLOCKSIZE)
0F4C   1903           00890     btfsc   STATUS, Z
0F4D   0211           00891     subwf   EEADR, w
0F4E   1803           00892     btfsc   STATUS, C
0F4F   2F55           00893     goto    WriteAddressOkay    ; writing after the boot block is okay
                      00894 
0F50   0023           00895     banksel EECON1              ; Bx -> B3
0F51   0195           00896     clrf    EECON1              ; inhibit writes for this block
0F52   2F58           00897     goto    LoadHoldingRegisters; fake the write so we can move on to real writes
                      00898 
0F53   2E20           00899     goto    BootloaderStart     ; this code -should- never be executed, but in case of errant 
0F54   2E20           00900     goto    BootloaderStart     ; execution or firmware bugs, may protect against accidental writes.
                      00901 #endif
0F55                  00902 WriteAddressOkay:
0F55   0023           00903     banksel EECON1                  ; Bx -> B3
0F56   3084           00904     movlw   b'10000100'             ; B3 setup FLASH write
0F57   0095           00905     movwf   EECON1                  ; B3
                      00906 
0F58                  00907 LoadHoldingRegisters:
0F58   0023           00908     banksel EEDATA                  ; Bx -> B2
0F59   0800           00909     movf    INDF, w                 ; Bx read from buffer memory
0F5A   0A84           00910     incf    FSR, f                  ; Bx increment buffer memory pointer
0F5B   0093           00911     movwf   EEDATA                  ; B2 load the least significant byte holding register
                      00912 
                      00913 #ifdef LWLO
0F5C   1695           00914     bsf     EECON1, LWLO            ; load latches only by default
0F5D   0811           00915     movf    EEADR, w                ; should we initiate write operation?
0F5E   3A1F           00916     xorlw  (WRITE_FLASH_BLOCKSIZE-1); ; (only initiate write operation on last word of flash write block
                            )
0F5F   391F           00917     andlw  (WRITE_FLASH_BLOCKSIZE-1)
0F60   1903           00918     btfsc   STATUS, Z
0F61   1295           00919     bcf     EECON1, LWLO            ; last word of the flash write block, initiate write operation
                      00920 #endif
                      00921 
0F62   0800           00922     movf    INDF, w                 ; Bx read from buffer memory
0F63   0A84           00923     incf    FSR, f                  ; Bx increment buffer memory pointer
0F64   0094           00924     movwf   EEDATH                  ; B2 load the most significant byte holding register
0F65   27D0           00925     call    StartWrite              ; B3 initiate a write
                      00926 
0F66   0023           00927     banksel EEADR
0F67   0A91           00928     incf    EEADR, f                ; B2/B3 increment FLASH memory write pointer
0F68   1903           00929     btfsc   STATUS, Z               ; Bx
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0F69   0A92           00930     incf    EEADRH, f               ; B2/B3
                      00931 
                      00932     ; are we at the end of a write block?
0F6A   301F           00933     movlw   (WRITE_FLASH_BLOCKSIZE-1)
0F6B   0511           00934     andwf   EEADR, w                ; B2/B3
0F6C   1D03 2F58      00935     bnz     LoadHoldingRegisters    ; Bx
                      00936 
                      00937     BXtoB0                          ; B2/B3 -> B0
0F6E   0020               M     movlb   .0                      ; Bx -> B0
0F6F   0BA5           00938     decfsz  DATA_COUNTL, F          ; B0 finished writing block, is there any more data to write?
0F70   2F3D           00939     goto    WriteFlash              ; Bx more data to write, repeat.
0F71   2F93           00940     goto    SendAcknowledge         ; B0 all done, send ACK packet
                      00941 
                      00942 ; In:   <STX>[<0x05><ADDRL><ADDRH><0x00><0x00><BYTESL><BYTESH>]<CRCL><CRCH><ETX>
                      00943 ; Out:  <STX>[<DATA>...]<CRCL><CRCH><ETX>
0F72                  00944 ReadEeprom:                         ; Bx
0F72   0023           00945     banksel EECON1                  ; Bx -> B3
0F73   0195           00946     clrf    EECON1                  ; B3
                      00947 
0F74                  00948 ReadEepromLoop:
0F74   1415           00949     bsf     EECON1, RD              ; B3 Read the data
0F75   1815           00950     btfsc   EECON1, RD
0F76   2F75           00951     goto    $-1                     ; wait for read to complete
0F77   0023           00952     banksel EEDATA                  ; Bx -> B2
0F78   0813           00953     movf    EEDATA, w               ; B2
                      00954 
0F79   0023           00955     banksel EEADR
0F7A   0A91           00956     incf    EEADR, f                ; B2 increment EEPROM data pointer
0F7B   1903           00957     btfsc   STATUS, Z               ; B2 did we overflow?
0F7C   0A92           00958     incf    EEADRH, f               ; B2 yes, increment high byte of EEPROM data pointer
                      00959 
0F7D   279F           00960     call    SendEscapeByte          ; Bx -> B1
0F7E   26B9           00961     call    AddCrcB1                ; B1
                      00962 
                      00963     BXtoB0                          ; Bx -> B0
0F7F   0020               M     movlb   .0                      ; Bx -> B0
0F80   0BA5           00964     decfsz  DATA_COUNTL, F          ; B0
0F81   2F72           00965     goto    ReadEeprom              ; Bx Not finished then repeat
0F82   2F96           00966     goto    SendChecksum            ; Bx
                      00967 
                      00968 ; In:   <STX>[<0x06><ADDRL><ADDRH><0x00><0x00><BYTESL><BYTESH><DATA>...]<CRCL><CRCH><ETX>
                      00969 ; Out:  <STX>[<0x06>]<CRCL><CRCH><ETX>
0F83                  00970 WriteEeprom:                        ; Bx
0F83   0A84           00971     incf    FSR, f                  ; Bx increment data buffer pointer
0F84   0800           00972     movf    INDF, w                 ; Bx read data from buffer
0F85   0023           00973     banksel EEDATA                  ; Bx -> B2
0F86   0093           00974     movwf   EEDATA                  ; B2 load the least significant byte holding register
                      00975     B2toB3                          ; B2 -> B3
0F87   0023               M     movlb   .3                      ; Bx -> B3
0F88   3004           00976     movlw   b'00000100'             ; Setup for EEPROM data writes
0F89   0095           00977     movwf   EECON1                  ; B3
0F8A   27D1           00978     call    StartWriteB3            ; B3
                      00979 
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0F8B   1895           00980     btfsc   EECON1, WR              ; B3 wait for write to complete before moving to next address
0F8C   2F8B           00981     goto    $-1
                      00982 
0F8D   0023           00983     banksel EEADR
0F8E   0A91           00984     incf    EEADR, F                ; B2/B3 Adjust EEDATA pointer
                      00985 
                      00986     BXtoB0                          ; B2 -> B0
0F8F   0020               M     movlb   .0                      ; Bx -> B0
0F90   0BA5           00987     decfsz  DATA_COUNTL, f          ; B0
0F91   2F83           00988     goto    WriteEeprom             ; Bx
0F92   2F93           00989     goto    SendAcknowledge         ; B0
                      00990 
                      00991 ; ***********************************************
                      00992 ; Send an acknowledgement packet back
                      00993 ;
                      00994 ; <STX><COMMAND><CRCL><CRCH><ETX>
                      00995 
                      00996 ; Some devices only have config words as FLASH memory. Some devices don't have EEPROM.
                      00997 ; For these devices, we can save code by jumping directly to sending back an
                      00998 ; acknowledgement packet if the PC application erroneously requests them.
                      00999 #ifndef FREE
                      01000 EraseFlash:                         ; only PIC16F88/87 supports explicit FLASH erase commands
                      01001 #endif
0F93                  01002 SendAcknowledge:                    ; B0
                      01003     
0F93   0820           01004     movf    COMMAND, w              ; B0
0F94   279F           01005     call    SendEscapeByte          ; B0/B1 -> B1 Send only the command byte (acknowledge packet)
0F95   26B9           01006     call    AddCrcB1                ; B1
                      01007 
0F96                  01008 SendChecksum:                       ; Bx
0F96   279B           01009     call    SendCRCWord             ; Bx -> B1
                      01010 
0F97                  01011 SendETX:                            ; Bx -> B1
                      01012     BXtoB0                          ; Bx -> B0
0F97   0020               M     movlb   .0                      ; Bx -> B0
0F98   3004           01013     movlw   ETX                     ; send end of text condition
0F99   27AF           01014     call    SendHostByte            ; B0/B1 -> B1
                      01015     
                      01016 
                      01017 
                      01018     
0F9A   2E58           01019     goto    WaitForHostCommand      ; B0/B1
                      01020 
                      01021 ; *****************************************************************************
                      01022 
                      01023 
                      01024 ; *****************************************************************************
0F9B                  01025 SendCRCWord:                        ; Bx -> B1
0F9B   0021           01026     banksel CRCL
0F9C   0820           01027     movf    CRCL, w                 ; B1
0F9D   279F           01028     call    SendEscapeByte          ; Bx -> B1
0F9E   0821           01029     movf    CRCH, w                 ; B1
                      01030     ;; fall through to SendEscapeByte routine below
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01031 
                      01032 ; Write a byte to the serial port while escaping control characters with a DLE
                      01033 ; first.
0F9F                  01034 SendEscapeByte:                     ; Bx -> B1
0F9F   0021           01035     banksel TXDATA
0FA0   00A3           01036     movwf   TXDATA                  ; B1 Save the data
                      01037  
0FA1   3A0F           01038     xorlw   STX                     ; Check for a STX
0FA2   1903 2FAC      01039     bz      WrDLE                   ; No, continue WrNext
                      01040 
0FA4   0823           01041     movf    TXDATA, W               ; B1
0FA5   3A04           01042     xorlw   ETX                     ; Check for a ETX
0FA6   1903 2FAC      01043     bz      WrDLE                   ; No, continue WrNext
                      01044 
0FA8   0823           01045     movf    TXDATA, W               ; B1
0FA9   3A05           01046     xorlw   DLE                     ; Check for a DLE
0FAA   1D03 2FAE      01047     bnz     WrNext                  ; No, continue WrNext
                      01048 
0FAC                  01049 WrDLE:
0FAC   3005           01050     movlw   DLE                     ; Yes, send DLE first
0FAD   27AF           01051     call    SendHostByte            ; B0/B1 -> B1
                      01052 
0FAE                  01053 WrNext:
0FAE   0823           01054     movf    TXDATA, W               ; B1 Then send STX
                      01055 
0FAF                  01056 SendHostByte:                       ; B0/B1 -> B1
                      01057     ;B1toB0                         ; B1 -> B0
0FAF   0020           01058     movlb .0                        ; bank 0                        
                      01059 
                      01060     
0FB0   0064           01061     clrwdt
0FB1   1E11           01062     btfss   PIR1, TXIF              ; B0 Write only if TXREG is ready
0FB2   2FB1           01063     goto    $-1
                      01064     
                      01065     
                      01066   
                      01067    ;#ifdef RS485_ENABLE 
0FB3   0023           01068    banksel RCSTA
0FB4   121D           01069    bcf     RCSTA, CREN             ; Stop receiving, so we dont receive what we send because rx enable i
                            s tied to ground
0FB5   0022           01070    banksel LATA
0FB6   168C           01071    bsf     LATA,5                  ;Set RS485 to TX Enable
0FB7   110C           01072    bcf     LATA,2
                      01073    ;#endif  
                      01074       
0FB8   0023           01075     banksel TXREG
0FB9   009A           01076     movwf   TXREG                   ; B0 Start sending
                      01077     
                      01078    
Warning[207]: Found label after column 1. (WaitForTxToComplete)
0FBA                  01079     WaitForTxToComplete:
0FBA   0064           01080     clrwdt
0FBB   1C9E           01081     btfss TXSTA, TRMT
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0FBC   33FD           01082     bra WaitForTxToComplete
                      01083     
0FBD   0022           01084     banksel LATA
0FBE   128C           01085     bcf     LATA,5               ;Set RS485 to RX Enable
0FBF   150C           01086     bsf     LATA,2
0FC0   0023           01087     banksel RCSTA
0FC1   161D           01088     bsf     RCSTA, CREN         ; Renable receiving
                      01089     
                      01090     
                      01091     
                      01092     ;B0toB1                          ; B0 -> B1
0FC2   0021           01093      movlb .1                        ; bank 1
                      01094     
                      01095     ;call Delay                                         ;DELETE IT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      01096     
0FC3   0000           01097    nop
                      01098      
0FC4   0008           01099     return
                      01100 ; *****************************************************************************
                      01101 
0FC5                  01102 ReadHostByte:                        ; Bx -> B0
                      01103     ;BXtoB0                          ; Bx -> B0
0FC5   0020           01104     movlb .0                         ; bank 0
                      01105      
0FC6   0064           01106     clrwdt
                      01107     ;goto LEDBLINK
0FC7   1E91           01108     btfss   PIR1, RCIF              ; B0 Wait for data from RS232
0FC8   2FC7           01109     goto    $-1   
                      01110     ;goto LEDBLINK
                      01111     
                      01112 #ifdef BSR
0FC9   0023           01113     banksel RCREG
                      01114 #endif
0FCA   0819           01115     movf    RCREG, W                ; B0 Save the data
                      01116 #ifdef BSR
0FCB   0020           01117     movlb   .0
                      01118 #endif
0FCC   0080           01119     movwf   INDF                    ; Bx
                      01120    
                      01121     ;goto 0xE64
0FCD   0008           01122     return
                      01123 
                      01124 #ifdef USE_SOFTBOOTWP
0FCE   2E20           01125     goto    BootloaderStart         ; this code -should- never be executed, but in case of errant 
0FCF   2E20           01126     goto    BootloaderStart         ; execution or firmware bugs, may protect against accidental writes.
                      01127 #endif
                      01128 
0FD0                  01129 StartWrite:                         ; B2/B3
                      01130     B2toB3                          ; B2 -> B3
0FD0   0023               M     movlb   .3                      ; Bx -> B3
0FD1                  01131 StartWriteB3:
0FD1   0064           01132     clrwdt                          ; Bx
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0FD2   3055           01133     movlw   0x55                    ; B3 Unlock
0FD3   0096           01134     movwf   EECON2                  ; B3
0FD4   30AA           01135     movlw   0xAA                    ; B3
0FD5   0096           01136     movwf   EECON2                  ; B3
0FD6   1495           01137     bsf     EECON1, WR              ; B3 Start the write
0FD7   0000           01138     nop                             ; Bx
0FD8   0000           01139     nop                             ; Bx    
0FD9   0008           01140     return                          ; B3
                      01141 
                      01142  
                      01143     
                      01144     
0FDA                  01145 Delay:                                                                  ; DELETE IT!!!!!!!!!!!!!!!!!!!!!
                            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
Warning[203]: Found opcode in column 1. (movlw)
0FDA   30FF           01146 movlw .255  
Warning[203]: Found opcode in column 1. (movwf)
Warning[219]: Invalid RAM location specified.
0FDB   00E0           01147 movwf Delay1
                      01148     
Warning[203]: Found opcode in column 1. (movlw)
0FDC   30FF           01149 movlw .255  
Warning[203]: Found opcode in column 1. (movwf)
Warning[219]: Invalid RAM location specified.
0FDD   00E1           01150 movwf Delay2    
0FDE                  01151 loopdel:
Warning[203]: Found opcode in column 1. (decfsz)
Warning[219]: Invalid RAM location specified.
0FDE   0BE0           01152 decfsz Delay1,f
Warning[203]: Found opcode in column 1. (bra)
0FDF   33FE           01153 bra loopdel
Warning[203]: Found opcode in column 1. (decfsz)
Warning[219]: Invalid RAM location specified.
0FE0   0BE1           01154 decfsz Delay2,f
Warning[203]: Found opcode in column 1. (bra)
0FE1   33FC           01155 bra loopdel    
Warning[203]: Found opcode in column 1. (return)
0FE2   0008           01156 return
                      01157     
                      01158  
                      01159     
0FE3                  01160 LEDBLINK:                                                               ; DELETE IT!!!!!!!!!!!!!!!!!!!!!
                            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      01161     
0FE3   0022           01162     banksel        LATA
0FE4   128C           01163     bcf  LATA,5 
                      01164         
Warning[203]: Found opcode in column 1. (call)
0FE5   27DA           01165 call Delay
Warning[203]: Found opcode in column 1. (call)
0FE6   27DA           01166 call Delay    
Warning[203]: Found opcode in column 1. (call)
0FE7   27DA           01167 call Delay
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[203]: Found opcode in column 1. (call)
0FE8   27DA           01168 call Delay
Warning[203]: Found opcode in column 1. (call)
0FE9   27DA           01169 call Delay    
Warning[203]: Found opcode in column 1. (call)
0FEA   27DA           01170 call Delay
Warning[203]: Found opcode in column 1. (call)
0FEB   27DA           01171 call Delay
Warning[203]: Found opcode in column 1. (call)
0FEC   27DA           01172 call Delay    
Warning[203]: Found opcode in column 1. (call)
0FED   27DA           01173 call Delay
Warning[203]: Found opcode in column 1. (call)
0FEE   27DA           01174 call Delay
Warning[203]: Found opcode in column 1. (call)
0FEF   27DA           01175 call Delay    
Warning[203]: Found opcode in column 1. (call)
0FF0   27DA           01176 call Delay
                      01177     
0FF1   0022           01178     banksel        LATA
0FF2   168C           01179     bsf  LATA,5
                      01180    
Warning[203]: Found opcode in column 1. (call)
0FF3   27DA           01181 call Delay
Warning[203]: Found opcode in column 1. (call)
0FF4   27DA           01182 call Delay    
Warning[203]: Found opcode in column 1. (call)
0FF5   27DA           01183 call Delay
Warning[203]: Found opcode in column 1. (call)
0FF6   27DA           01184 call Delay
Warning[203]: Found opcode in column 1. (call)
0FF7   27DA           01185 call Delay    
Warning[203]: Found opcode in column 1. (call)
0FF8   27DA           01186 call Delay
Warning[203]: Found opcode in column 1. (call)
0FF9   27DA           01187 call Delay
Warning[203]: Found opcode in column 1. (call)
0FFA   27DA           01188 call Delay    
Warning[203]: Found opcode in column 1. (call)
0FFB   27DA           01189 call Delay
Warning[203]: Found opcode in column 1. (call)
0FFC   27DA           01190 call Delay
Warning[203]: Found opcode in column 1. (call)
0FFD   27DA           01191 call Delay    
Warning[203]: Found opcode in column 1. (call)
0FFE   27DA           01192 call Delay
                      01193    
                      01194     ;movlw   b'00000111'
                      01195     ;call SendHostByte
                      01196     ;call Delay
                      01197     ;RESET
                      01198     
Warning[203]: Found opcode in column 1. (bra)
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0FFF   33E3           01199 bra LEDBLINK    
                      01200     
                      01201     
                      01202     
                      01203     
                      01204     
                      01205     
                      01206     END
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 61


SYMBOL TABLE
  LABEL                             VALUE 

ABDEN                             00000000
ABDOVF                            00000007
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACKTIM                            00000007
ADCON0                            0000009D
ADCON1                            0000009E
ADCS0                             00000004
ADCS1                             00000005
ADCS2                             00000006
ADDEN                             00000003
ADDRESS_H                         00000022
ADDRESS_L                         00000021
ADDRESS_U                         00000023
ADDRESS_X                         00000024
ADFM                              00000007
ADFVR0                            00000000
ADFVR1                            00000001
ADGO                              00000001
ADIE                              00000006
ADIF                              00000006
ADNREF                            00000002
ADON                              00000000
ADPREF0                           00000000
ADPREF1                           00000001
ADRES                             0000009B
ADRESH                            0000009C
ADRESL                            0000009B
AHEN                              00000001
ANSA0                             00000000
ANSA1                             00000001
ANSA2                             00000002
ANSA4                             00000004
ANSC0                             00000000
ANSC1                             00000001
ANSC2                             00000002
ANSC3                             00000003
ANSELA                            0000018C
ANSELC                            0000018E
APFCON0                           0000011D
APFCON1                           0000011E
AddCrc                            00000EB8
AddCrcB1                          00000EB9
AppVector                         (BootloaderStart-.5)
AppendDataBuffer                  00000E71
B0toB1                            
B0toB2                            
B1toB0                            
B1toB3                            
B2toB0                            
B2toB1                            00000E33
B2toB3                            
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 62


SYMBOL TABLE
  LABEL                             VALUE 

B3toB2                            
BAUDCON                           0000019F
BAUDCTL                           BAUDCON
BCL1IE                            00000003
BCL1IF                            00000003
BF                                00000000
BOEN                              00000004
BOOTBLOCKSIZE                     (BOOTLOADERSIZE / ERASE_FLASH_BLOCKSIZE + 1) * ERASE_FLASH_BLOCKSIZE
BOOTLOADERSIZE                    .463
BOOTLOADER_ADDRESS                (END_FLASH - BOOTBLOCKSIZE)
BORCON                            00000116
BORRDY                            00000000
BRG16                             00000003
BRGH                              00000002
BSR                               00000008
BSR0                              00000000
BSR1                              00000001
BSR2                              00000002
BSR3                              00000003
BSR4                              00000004
BSR_SHAD                          00000FE6
BXtoB0                            
BootInfoBlock                     00000ED0
BootInfoBlockEnd                  00000ED6
BootloadMode                      00000E29
BootloaderBreakCheck              00000E23
BootloaderInfo                    00000ED6
BootloaderStart                   00000E20
C                                 00000000
C1HYS                             00000001
C1IE                              00000005
C1IF                              00000005
C1INTN                            00000006
C1INTP                            00000007
C1NCH0                            00000000
C1NCH1                            00000001
C1OE                              00000005
C1ON                              00000007
C1OUT                             00000006
C1PCH0                            00000004
C1PCH1                            00000005
C1POL                             00000004
C1SP                              00000002
C1SYNC                            00000000
C1TSEL0                           00000000
C1TSEL1                           00000001
C2HYS                             00000001
C2IE                              00000006
C2IF                              00000006
C2INTN                            00000006
C2INTP                            00000007
C2NCH0                            00000000
C2NCH1                            00000001
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 63


SYMBOL TABLE
  LABEL                             VALUE 

C2OE                              00000005
C2ON                              00000007
C2OUT                             00000006
C2PCH0                            00000004
C2PCH1                            00000005
C2POL                             00000004
C2SP                              00000002
C2SYNC                            00000000
C2TSEL0                           00000002
C2TSEL1                           00000003
C3TSEL0                           00000004
C3TSEL1                           00000005
C4TSEL0                           00000006
C4TSEL1                           00000007
CCP1AS                            00000295
CCP1AS0                           00000004
CCP1AS1                           00000005
CCP1AS2                           00000006
CCP1ASE                           00000007
CCP1CON                           00000293
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP2AS                            0000029C
CCP2AS0                           00000004
CCP2AS1                           00000005
CCP2AS2                           00000006
CCP2ASE                           00000007
CCP2CON                           0000029A
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2SEL                           00000000
CCP3CON                           00000313
CCP3IE                            00000004
CCP3IF                            00000004
CCP3M0                            00000000
CCP3M1                            00000001
CCP3M2                            00000002
CCP3M3                            00000003
CCP4CON                           0000031A
CCP4IE                            00000005
CCP4IF                            00000005
CCP4M0                            00000000
CCP4M1                            00000001
CCP4M2                            00000002
CCP4M3                            00000003
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 64


SYMBOL TABLE
  LABEL                             VALUE 

CCPR1                             00000291
CCPR1H                            00000292
CCPR1L                            00000291
CCPR2                             00000298
CCPR2H                            00000299
CCPR2L                            00000298
CCPR3                             00000311
CCPR3H                            00000312
CCPR3L                            00000311
CCPR4                             00000318
CCPR4H                            00000319
CCPR4L                            00000318
CCPTMRS                           0000029E
CCPTMRS0                          0000029E
CDAFVR0                           00000002
CDAFVR1                           00000003
CFGS                              00000006
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CHS4                              00000006
CKE                               00000006
CKP                               00000004
CLKRCON                           0000039A
CLKRDC0                           00000003
CLKRDC1                           00000004
CLKRDIV0                          00000000
CLKRDIV1                          00000001
CLKRDIV2                          00000002
CLKREN                            00000007
CLKROE                            00000006
CLKRSLR                           00000005
CM1CON0                           00000111
CM1CON1                           00000112
CM2CON0                           00000113
CM2CON1                           00000114
CMOUT                             00000115
COMMAND                           00000020
CPSCH0                            00000000
CPSCH1                            00000001
CPSCH2                            00000002
CPSCH3                            00000003
CPSCON0                           0000001E
CPSCON1                           0000001F
CPSON                             00000007
CPSOUT                            00000001
CPSRM                             00000006
CPSRNG0                           00000002
CPSRNG1                           00000003
CRCH                              000000A1
CRCL                              000000A0
CREN                              00000004
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 65


SYMBOL TABLE
  LABEL                             VALUE 

CSRC                              00000007
C_SHAD                            00000000
CheckCommand                      00000E9E
DACCON0                           00000118
DACCON1                           00000119
DACEN                             00000007
DACLPS                            00000006
DACNSS                            00000000
DACOE                             00000005
DACPSS0                           00000002
DACPSS1                           00000003
DACR0                             00000000
DACR1                             00000001
DACR2                             00000002
DACR3                             00000003
DACR4                             00000004
DATA_COUNTH                       00000026
DATA_COUNTL                       00000025
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DC2B0                             00000004
DC2B1                             00000005
DC3B0                             00000004
DC3B1                             00000005
DC4B0                             00000004
DC4B1                             00000005
DC_SHAD                           00000001
DEVICEID                          .314
DHEN                              00000000
DLE                               0x05
D_NOT_A                           00000005
Delay                             00000FDA
Delay1                            00000E60
Delay2                            00000E61
DigitalInput                      
DoAutoBaud                        00000E43
ECCP1AS                           00000295
EEADR                             00000191
EEADRH                            00000192
EEADRL                            00000191
EECON1                            00000195
EECON2                            00000196
EEDAT                             00000193
EEDATA                            EEDATL
EEDATH                            00000194
EEDATL                            00000193
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
END_FLASH                         0x1000
END_GPR                           0x1000
ERASE_ADDRESS_MASK                ( (~(ERASE_FLASH_BLOCKSIZE-1)) & (END_FLASH-1) )
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 66


SYMBOL TABLE
  LABEL                             VALUE 

ERASE_FLASH_BLOCKSIZE             .32
ETX                               0x04
EraseAddressOkay                  00000F2E
EraseFlash                        00000F16
F                                 00000001
FERR                              00000002
FREE                              00000004
FSR                               FSR0L
FSR0                              00000004
FSR0H                             00000005
FSR0H_SHAD                        00000FE9
FSR0L                             00000004
FSR0L_SHAD                        00000FE8
FSR1                              00000006
FSR1H                             00000007
FSR1H_SHAD                        00000FEB
FSR1L                             00000006
FSR1L_SHAD                        00000FEA
FVRCON                            00000117
FVREN                             00000007
FVRRDY                            00000006
GCEN                              00000007
GIE                               00000007
GO                                00000001
GO_NOT_DONE                       00000001
HFIOFL                            00000003
HFIOFR                            00000004
HFIOFS                            00000000
INDF                              INDF0
INDF0                             00000000
INDF1                             00000001
INLVLA                            0000038C
INLVLA0                           00000000
INLVLA1                           00000001
INLVLA2                           00000002
INLVLA3                           00000003
INLVLA4                           00000004
INLVLA5                           00000005
INLVLC                            0000038E
INLVLC0                           00000000
INLVLC1                           00000001
INLVLC2                           00000002
INLVLC3                           00000003
INLVLC4                           00000004
INLVLC5                           00000005
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IOCAF                             00000393
IOCAF0                            00000000
IOCAF1                            00000001
IOCAF2                            00000002
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 67


SYMBOL TABLE
  LABEL                             VALUE 

IOCAF3                            00000003
IOCAF4                            00000004
IOCAF5                            00000005
IOCAN                             00000392
IOCAN0                            00000000
IOCAN1                            00000001
IOCAN2                            00000002
IOCAN3                            00000003
IOCAN4                            00000004
IOCAN5                            00000005
IOCAP                             00000391
IOCAP0                            00000000
IOCAP1                            00000001
IOCAP2                            00000002
IOCAP3                            00000003
IOCAP4                            00000004
IOCAP5                            00000005
IOCIE                             00000003
IOCIF                             00000000
IRCF0                             00000003
IRCF1                             00000004
IRCF2                             00000005
IRCF3                             00000006
JUMPTABLE_BEGIN                   00000EA4
JUMPTABLE_END                     00000EAE
LATA                              0000010C
LATA0                             00000000
LATA1                             00000001
LATA2                             00000002
LATA4                             00000004
LATA5                             00000005
LATC                              0000010E
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LEDBLINK                          00000FE3
LFIOFR                            00000001
LWLO                              00000005
LoadHoldingRegisters              00000F58
MAJOR_VERSION                     .1
MC1OUT                            00000000
MC2OUT                            00000001
MDBIT                             00000000
MDCARH                            0000039F
MDCARL                            0000039E
MDCH0                             00000000
MDCH1                             00000001
MDCH2                             00000002
MDCH3                             00000003
MDCHODIS                          00000007
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 68


SYMBOL TABLE
  LABEL                             VALUE 

MDCHPOL                           00000006
MDCHSYNC                          00000005
MDCL0                             00000000
MDCL1                             00000001
MDCL2                             00000002
MDCL3                             00000003
MDCLODIS                          00000007
MDCLPOL                           00000006
MDCLSYNC                          00000005
MDCON                             0000039C
MDEN                              00000007
MDMS0                             00000000
MDMS1                             00000001
MDMS2                             00000002
MDMS3                             00000003
MDMSODIS                          00000007
MDOE                              00000006
MDOPOL                            00000004
MDOUT                             00000003
MDSLR                             00000005
MDSRC                             0000039D
MFIOFR                            00000002
MINOR_VERSION                     .5
NOT_BOR                           00000000
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RI                            00000002
NOT_RMCLR                         00000003
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_WPUEN                         00000007
NTX                               0xFF
NextEraseBlock                    00000F32
NoETX                             00000E6C
NoSTX                             00000E68
OERR                              00000001
OPTION_REG                        00000095
OSCCON                            00000099
OSCSTAT                           0000009A
OSCTUNE                           00000098
OSFIE                             00000007
OSFIF                             00000007
OSTS                              00000005
P                                 00000004
P1CSEL                            00000002
P1DC0                             00000000
P1DC1                             00000001
P1DC2                             00000002
P1DC3                             00000003
P1DC4                             00000004
P1DC5                             00000005
P1DC6                             00000006
P1DSEL                            00000003
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 69


SYMBOL TABLE
  LABEL                             VALUE 

P1M0                              00000006
P1M1                              00000007
P1RSEN                            00000007
P2BSEL                            00000001
P2DC0                             00000000
P2DC1                             00000001
P2DC2                             00000002
P2DC3                             00000003
P2DC4                             00000004
P2DC5                             00000005
P2DC6                             00000006
P2M0                              00000006
P2M1                              00000007
P2RSEN                            00000007
PACKET_DATA                       00000026
PCIE                              00000006
PCL                               00000002
PCLATH                            0000000A
PCLATH_SHAD                       00000FE7
PCON                              00000096
PEIE                              00000006
PEN                               00000002
PIE1                              00000091
PIE2                              00000092
PIE3                              00000093
PIR1                              00000011
PIR2                              00000012
PIR3                              00000013
PLLR                              00000006
PORTA                             0000000C
PORTC                             0000000E
PR2                               0000001B
PR4                               00000416
PR6                               0000041D
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSS1AC0                           00000002
PSS1AC1                           00000003
PSS1BD0                           00000000
PSS1BD1                           00000001
PSS2AC0                           00000002
PSS2AC1                           00000003
PSS2BD0                           00000000
PSS2BD1                           00000001
PSTR1CON                          00000296
PSTR2CON                          0000029D
PWM1CON                           00000294
PWM2CON                           0000029B
RA0                               00000000
RA1                               00000001
RA2                               00000002
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 70


SYMBOL TABLE
  LABEL                             VALUE 

RA3                               00000003
RA4                               00000004
RA5                               00000005
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCREG                             00000199
RCSTA                             0000019D
RD                                00000000
RS485_ENABLE                      
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
RXDATA                            000000A2
RXDTSEL                           00000007
RXPIN                             RC5
RXPORT                            PORTC
R_NOT_W                           00000002
ReadEeprom                        00000F72
ReadEepromLoop                    00000F74
ReadFlash                         00000EDE
ReadFlashWord                     00000EF2
ReadHostByte                      00000FC5
ReceiveDataLoop                   00000E64
RetryAutoBaud                     00000E48
S                                 00000003
SBCDE                             00000002
SBOREN                            00000007
SCIE                              00000005
SCKP                              00000004
SCS0                              00000000
SCS1                              00000001
SDAHT                             00000003
SDO1SEL                           00000006
SDOSEL                            00000006
SEN                               00000000
SENDB                             00000003
SMP                               00000007
SP1BRG                            0000019B
SP1BRGH                           0000019C
SP1BRGL                           0000019B
SPBRG                             0000019B
SPBRGH                            0000019C
SPBRGL                            0000019B
SPEN                              00000007
SPLLEN                            00000007
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 71


SYMBOL TABLE
  LABEL                             VALUE 

SRCLK0                            00000004
SRCLK1                            00000005
SRCLK2                            00000006
SRCON0                            0000011A
SRCON1                            0000011B
SREN                              00000005
SRLEN                             00000007
SRNQEN                            00000002
SRPR                              00000000
SRPS                              00000001
SRQEN                             00000003
SRRC1E                            00000000
SRRC2E                            00000001
SRRCKE                            00000002
SRRPE                             00000003
SRSC1E                            00000004
SRSC2E                            00000005
SRSCKE                            00000006
SRSPE                             00000007
SS1SEL                            00000005
SSP1ADD                           00000212
SSP1BUF                           00000211
SSP1CON                           00000215
SSP1CON1                          00000215
SSP1CON2                          00000216
SSP1CON3                          00000217
SSP1IE                            00000003
SSP1IF                            00000003
SSP1MSK                           00000213
SSP1STAT                          00000214
SSPADD                            00000212
SSPBUF                            00000211
SSPCON                            00000215
SSPCON1                           00000215
SSPCON2                           00000216
SSPCON3                           00000217
SSPEN                             00000005
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPMSK                            00000213
SSPOV                             00000006
SSPSTAT                           00000214
SSSEL                             00000005
STARTBUFFER                       00000020
STATUS                            00000003
STATUS_SHAD                       00000FE4
STKOVF                            00000007
STKPTR                            00000FED
STKUNF                            00000006
STR1A                             00000000
STR1B                             00000001
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 72


SYMBOL TABLE
  LABEL                             VALUE 

STR1C                             00000002
STR1D                             00000003
STR1SYNC                          00000004
STR2A                             00000000
STR2B                             00000001
STR2C                             00000002
STR2D                             00000003
STR2SYNC                          00000004
STX                               0x0F
SWDTEN                            00000000
SYNC                              00000004
SendAcknowledge                   00000F93
SendCRCWord                       00000F9B
SendChecksum                      00000F96
SendETX                           00000F97
SendEscapeByte                    00000F9F
SendHostByte                      00000FAF
StartOfLine                       00000E62
StartWrite                        00000FD0
StartWriteB3                      00000FD1
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T0XCS                             00000000
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000018
T1GCON                            00000019
T1GGO                             00000003
T1GGO_NOT_DONE                    00000003
T1GPOL                            00000006
T1GSEL                            00000003
T1GSPM                            00000004
T1GSS0                            00000000
T1GSS1                            00000001
T1GTM                             00000005
T1GVAL                            00000002
T1OSCEN                           00000003
T1OSCR                            00000007
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             0000001C
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T4CKPS0                           00000000
T4CKPS1                           00000001
T4CON                             00000417
T4OUTPS0                          00000003
T4OUTPS1                          00000004
T4OUTPS2                          00000005
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 73


SYMBOL TABLE
  LABEL                             VALUE 

T4OUTPS3                          00000006
T6CKPS0                           00000000
T6CKPS1                           00000001
T6CON                             0000041E
T6OUTPS0                          00000003
T6OUTPS1                          00000004
T6OUTPS2                          00000005
T6OUTPS3                          00000006
TMR0                              00000015
TMR0CS                            00000005
TMR0IE                            00000005
TMR0IF                            00000002
TMR0SE                            00000004
TMR1                              00000016
TMR1CS0                           00000006
TMR1CS1                           00000007
TMR1GE                            00000007
TMR1GIE                           00000007
TMR1GIF                           00000007
TMR1H                             00000017
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             00000016
TMR1ON                            00000000
TMR2                              0000001A
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TMR4                              00000415
TMR4IE                            00000001
TMR4IF                            00000001
TMR4ON                            00000002
TMR6                              0000041C
TMR6IE                            00000003
TMR6IF                            00000003
TMR6ON                            00000002
TOSH                              00000FEF
TOSL                              00000FEE
TRISA                             0000008C
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISC                             0000008E
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRMT                              00000001
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 74


SYMBOL TABLE
  LABEL                             VALUE 

TSEN                              00000005
TSRNG                             00000004
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TUN5                              00000005
TX9                               00000006
TX9D                              00000000
TXCKSEL                           00000002
TXDATA                            000000A3
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXPIN                             RC4
TXREG                             0000019A
TXSTA                             0000019E
TXTRIS                            TRISC
UA                                00000001
USE_SOFTBOOTWP                    
VerifyFlash                       00000EFD
VerifyPacketCRC                   00000E75
VerifyPacketCrcLoop               00000E7F
W                                 00000000
WCOL                              00000007
WDTCON                            00000097
WDTPS0                            00000001
WDTPS1                            00000002
WDTPS2                            00000003
WDTPS3                            00000004
WDTPS4                            00000005
WPUA                              0000020C
WPUA0                             00000000
WPUA1                             00000001
WPUA2                             00000002
WPUA3                             00000003
WPUA4                             00000004
WPUA5                             00000005
WPUC                              0000020E
WPUC0                             00000000
WPUC1                             00000001
WPUC2                             00000002
WPUC3                             00000003
WPUC4                             00000004
WPUC5                             00000005
WR                                00000001
WREG                              00000009
WREG_SHAD                         00000FE5
WREN                              00000002
WRERR                             00000003
WRITE_ADDRESS_MASK                ( (~(WRITE_FLASH_BLOCKSIZE-1)) & (END_FLASH-1) )
WRITE_FLASH_BLOCKSIZE             .32
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 75


SYMBOL TABLE
  LABEL                             VALUE 

WUE                               00000001
WaitForHostCommand                00000E58
WaitForRise                       00000EB0
WaitForRiseLoop                   00000EB1
WaitForTxToComplete               00000FBA
WrDLE                             00000FAC
WrNext                            00000FAE
WriteAddressOkay                  00000F55
WriteEeprom                       00000F83
WriteFlash                        00000F3D
WtSR                              00000EB5
Z                                 00000002
Z_SHAD                            00000002
_BOREN_NSLEEP                     00003DFF
_BOREN_OFF                        000039FF
_BOREN_ON                         00003FFF
_BOREN_SBODEN                     00003BFF
_BORV_19                          00003FFF
_BORV_HI                          00003BFF
_BORV_LO                          00003FFF
_CLKOUTEN_OFF                     00003FFF
_CLKOUTEN_ON                      000037FF
_CONFIG1                          00008007
_CONFIG2                          00008008
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_OFF                           00003FFF
_CP_ON                            00003F7F
_DEVID1                           00008006
_FCMEN_OFF                        00001FFF
_FCMEN_ON                         00003FFF
_FOSC_ECH                         00003FFF
_FOSC_ECL                         00003FFD
_FOSC_ECM                         00003FFE
_FOSC_EXTRC                       00003FFB
_FOSC_HS                          00003FFA
_FOSC_INTOSC                      00003FFC
_FOSC_LP                          00003FF8
_FOSC_XT                          00003FF9
_IDLOC0                           00008000
_IDLOC1                           00008001
_IDLOC2                           00008002
_IDLOC3                           00008003
_IESO_OFF                         00002FFF
_IESO_ON                          00003FFF
_LVP_OFF                          00001FFF
_LVP_ON                           00003FFF
_MCLRE_OFF                        00003FBF
_MCLRE_ON                         00003FFF
_PLLEN_OFF                        00003EFF
_PLLEN_ON                         00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FDF
MPASM 5.67              PIC16 BOOTLOADER.ASM   7-14-2016  17:08:08         PAGE 76


SYMBOL TABLE
  LABEL                             VALUE 

_STVREN_OFF                       00003DFF
_STVREN_ON                        00003FFF
_WDTE_NSLEEP                      00003FF7
_WDTE_OFF                         00003FE7
_WDTE_ON                          00003FFF
_WDTE_SWDTEN                      00003FEF
_WRT_ALL                          00003FFC
_WRT_BOOT                         00003FFE
_WRT_HALF                         00003FFD
_WRT_OFF                          00003FFF
__16F1824                         00000001
lfsr                              
loopdel                           00000FDE


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0E00 : ---------------- ---------------- XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0E40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0E80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0EC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0F00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0F40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0F80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0FC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
8000 : -------XX------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   482
Program Memory Words Free:  3614


Errors   :     0
Warnings :    40 reported,     0 suppressed
Messages :     2 reported,   114 suppressed

